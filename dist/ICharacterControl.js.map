{"version":3,"sources":["../src/ICharacterControl.ts"],"names":["Dir"],"mappings":";;AAAA;;IAIKA,G;;WAAAA,G;AAAAA,EAAAA,G;AAAAA,EAAAA,G;AAAAA,EAAAA,G;AAAAA,EAAAA,G;GAAAA,G,KAAAA,G","sourcesContent":["import 'phaser'\nimport { Interpreter } from 'xstate'\nimport easystar from 'easystarjs';\n\nenum Dir {\n\tnorth=\"north\",\n\tsouth=\"south\",\n\teast=\"east\",\n\twest=\"west\"\n}\n\nexport interface ICharacterControl {\n    body: Phaser.Types.Physics.Arcade.GameObjectWithDynamicBody\n    changeGroundVel(vel: Phaser.Types.Math.Vector2Like): void\n    move(dir: Dir): void\n    dash(dir: Dir): void\n    face(dir: Dir): void\n    stop(face?: Dir): void\n    playAnim(anim: string): void\n    moveToPoint(point: Phaser.Types.Math.Vector2Like, finder: easystar.js): void\n}\n\nexport interface ICharacterUIControl {\n    toggleDashBoxes(): void\n    minusDashBox(): void\n    showLabel(): void\n    hideLabel(): void\n    speak(msg:string): void\n}\n\nexport interface ICharacterSettings {\n    speed: number\n    name: string\n    dashDistance: number\n    charge: number\n}\n\nexport interface ICharacterState {\n    facing: Dir\n    onPlatform: boolean\n    auto: boolean\n    player: boolean\n    groundVel: Phaser.Types.Math.Vector2Like\n}\n\nexport interface ICharacterMoveMachine{\n    send(msg:string): void\n    start(): void\n    pause(): void\n    kill(): void\n    moveMachine: Interpreter<any>\n}\n\nexport interface ICharacterNPCMachine{\n    start(): void\n    pause(): void\n    kill(): void\n    moveMachine: Interpreter<any>\n}\n\nexport interface ICharacter extends ICharacterControl, ICharacterUIControl, ICharacterSettings, ICharacterState, ICharacterMoveMachine {}\nexport interface INPC extends ICharacter, ICharacterNPCMachine {}\n\n"],"file":"ICharacterControl.js"}