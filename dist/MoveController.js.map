{"version":3,"sources":["../src/MoveController.ts"],"names":["Action","MoveController","moveMachine","scene","Set","event","repeat","shiftMapping","key","undefined","mapping","shiftKey","held","add","ordered","lastheld","length","delete","send","point","input","activePointer","leftButtonDown","x","worldX","y","worldY","ArrowLeft","dir","Dir","west","ArrowRight","east","ArrowUp","north","ArrowDown","south","a","u","d","w","s","t","setGameplayControl","keyboard","on","gameplayKeyDown","gameplayKeyUp","gameplayMouseDown","Phaser","Input","Events","POINTER_WHEEL","deltaY","am","cameras","main","zoom","zoomTo"],"mappings":"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","sourcesContent":["import 'phaser'\n// import { ICharacterMoveMachine } from './ICharacter'\nimport { Dir } from './joegameTypes'\n// import moveDistance from './actions/moveDistance'\nimport { Interpreter } from 'xstate'\nimport { MoveMachineContext } from './components/MoveMachine'\n\ninterface Keys {\n    UP: Phaser.Input.Keyboard.Key;\n    DOWN: Phaser.Input.Keyboard.Key;\n    LEFT: Phaser.Input.Keyboard.Key;\n    RIGHT: Phaser.Input.Keyboard.Key;\n}\n\nenum Action {\n    keydown, keyup\n}\ninterface IMoveControllerCharacter {\n    moveMachine: Interpreter<MoveMachineContext>\n    move(dir: Dir): void\n    stop(face?: Dir): void\n    align(): Phaser.Types.Math.Vector2Like\n}\n\nexport default class MoveController {\n    held: Set<string>=new Set();\n\n    constructor (private moveMachine: Interpreter<MoveMachineContext>, private scene: Phaser.Scene) {\n      this.setGameplayControl()\n    }\n\n    setGameplayControl () {\n      this.scene.input.keyboard.on('keydown', this.gameplayKeyDown)\n      this.scene.input.keyboard.on('keyup', this.gameplayKeyUp)\n      this.scene.input.on('pointerdown', this.gameplayMouseDown)\n      this.scene.input.on(Phaser.Input.Events.POINTER_WHEEL, ({ deltaY }) => {\n        if (deltaY < 0) {\n          const am = this.scene.cameras.main.zoom + 0.8\n          this.scene.cameras.main.zoomTo(am > 10 ? 10 : am)\n        } else {\n          const am = this.scene.cameras.main.zoom - 0.8\n          this.scene.cameras.main.zoomTo(am < 0.2 ? 0.2 : am)\n        }\n      })\n    }\n\n    gameplayKeyDown=(event: KeyboardEvent) => {\n      if (event.repeat === true) return\n      if (this.shiftMapping[event.key] === undefined && this.mapping[event.key] === undefined) return\n      if (event.shiftKey && this.shiftMapping[event.key]) {\n        this.shiftMapping[event.key]()\n        return\n      }\n      this.held.add(event.key)\n      const ordered = [...this.held]\n      const lastheld = ordered[ordered.length - 1]\n      if (this.mapping[lastheld]) {\n        this.mapping[lastheld]()\n      }\n    }\n\n    gameplayKeyUp=(event: KeyboardEvent) => {\n      if (event.repeat === true) return\n      this.held.delete(event.key)\n      const ordered = [...this.held]\n      const lastheld = ordered[ordered.length - 1]\n      if (lastheld != undefined && this.mapping[lastheld]) {\n        // this.char.body.setVelocity(0,0);\n        // this.char.alignOnTile();\n        this.mapping[lastheld]()\n      } else {\n        // this.char.stopMove();\n        this.moveMachine.send('STOP')\n      }\n    };\n\n    gameplayMouseDown=() => {\n      const point = this.scene.input.activePointer\n      if (point.leftButtonDown()) {\n        this.moveMachine.send('MOVE_ON_PATH', { point: { x: point.worldX, y: point.worldY } })\n      }\n    }\n\n    mapping = {\n      ArrowLeft: () => {\n        this.moveMachine.send('MOVE', { dir: Dir.west })\n      },\n      ArrowRight: () => {\n        // this.char.move(Dir.east);\n        this.moveMachine.send('MOVE', { dir: Dir.east })\n      },\n      ArrowUp: () => {\n        // this.char.move(Dir.north);\n        this.moveMachine.send('MOVE', { dir: Dir.north })\n      },\n      ArrowDown: () => {\n        // this.char.move(Dir.south)\n        this.moveMachine.send('MOVE', { dir: Dir.south })\n      },\n      a: () => {\n        // this.char.move(Dir.south)\n        // console.log(this.char.align());\n      },\n      // \"d\": this.mapping[\"ArrowRight\"],\n      // \"w\": this.mapping[\"ArrowUp\"],\n      // \"s\": this.mapping[\"ArrowDown\"],\n      // \"h\": this.mapping[\"ArrowLeft\"],\n      // \"l\": this.mapping[\"ArrowRight\"],\n      // \"k\": this.mapping[\"ArrowUp\"],\n      // \"j\": this.mapping[\"ArrowDown\"],\n      y: () => {\n      },\n      u: () => {\n      },\n      ' ': () => {\n        // this.scene.initDialogue();\n      }\n    };\n\n    shiftMapping = {\n      ArrowLeft: () => {\n        this.moveMachine.send('DASH', { dir: Dir.west })\n      },\n      ArrowRight: () => {\n        this.moveMachine.send('DASH', { dir: Dir.east })\n      },\n      ArrowUp: () => {\n        this.moveMachine.send('DASH', { dir: Dir.north })\n      },\n      ArrowDown: () => {\n        this.moveMachine.send('DASH', { dir: Dir.south })\n      },\n      a: () => {\n      },\n      d: () => {\n      },\n      w: () => {\n      },\n      s: () => {\n      },\n      t: () => {\n      },\n      ' ': () => {\n      }\n    };\n}\n"],"file":"MoveController.js"}