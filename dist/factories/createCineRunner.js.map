{"version":3,"sources":["../../src/factories/createCineRunner.ts"],"names":["level","yarnjson","textWindow","runner","Runner","load","setVariableStorage","scene","registry","tileSize","map","tileWidth","registerFunction","args","Promise","resolve","setTimeout","machineRegisty","sendTo","type","point","x","y","machines","get","onTransition","state","value","_args","open","close","setMDText"],"mappings":"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","sourcesContent":["import 'phaser'\nimport { Runner, YarnNode } from 'bondage'\nimport { ITextWindow } from '../components/TextWindow'\nimport { ILevelComponents } from '../ILevel'\n\nexport default function(level: ILevelComponents,\n    yarnjson: YarnNode[],\n    textWindow: ITextWindow,\n): Runner {\n    const runner = new Runner()\n    runner.load(yarnjson)\n    runner.setVariableStorage(level.scene.registry)\n\n    //NOTE assuming square tile\n    const tileSize = level.map.tileWidth\n\n    runner.registerFunction('wait', async (args: [number]) => {\n        await new Promise(resolve => { setTimeout(resolve, args[0]) })\n    })\n    runner.registerFunction('moveChar', (args: [string, number, number, string]) => {\n        level.machineRegisty.sendTo(args[0], { type: 'MOVE_ON_PATH', point: { x: args[1] * tileSize, y: args[2] * tileSize } })\n    })\n    runner.registerFunction('moveCharSync', (args: [string, number, number, string]) => {\n        level.machineRegisty.sendTo(args[0], { type: 'MOVE_ON_PATH', point: { x: args[1] * tileSize, y: args[2] * tileSize } })\n        return new Promise(resolve => {\n            level.machineRegisty.machines.get(args[0])!.onTransition(state => {\n                if (state.value === 'still') {\n                    resolve(null)\n                }\n            })\n        })\n    })\n    runner.registerFunction('transportChar', (args: [string, number, number, string]) => {\n        level.machineRegisty.sendTo(args[0], { type: 'TRANSPORT', point: { x: args[1] * tileSize, y: args[2] * tileSize } })\n    })\n    runner.registerFunction('openWindow', (_args) => {\n        textWindow.open()\n    })\n    runner.registerFunction('closeWindow', (_args) => {\n        textWindow.close()\n    })\n    runner.registerFunction('clearWindowText', (_args) => {\n        textWindow.setMDText('')\n    })\n\n\n\n\n\n    return runner\n}\n"],"file":"createCineRunner.js"}