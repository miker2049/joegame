{"version":3,"sources":["../../src/factories/createPlatformsFromLayer.ts"],"names":["level","layer","map","getObjectLayer","platformSets","objects","obj_","name","push","plat","platform","platDur","properties","forEach","prop","value","platConfig","x","tileWidth","y","tileHeight","width","height","endX","endY","speed","ptype","type","Platform"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;AAGe,iBAAUA,KAAV,EAAmCC,KAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,cACPD,KAAK,CAACE,GAAN,CAAUC,cAAV,CAAyBF,KAAzB,CADO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEPG,UAAAA,YAFO,GAEY,EAFZ;AAAA,iDAGKJ,KAAK,CAACE,GAAN,CAAUC,cAAV,CAAyBF,KAAzB,EAAgCI,OAHrC;;AAAA;AAGX,gEAAwD;AAAhDC,cAAAA,IAAgD;;AACpD,kBAAGF,YAAY,CAACE,IAAI,CAACC,IAAN,CAAf,EAA2B;AACvBH,gBAAAA,YAAY,CAACE,IAAI,CAACC,IAAN,CAAZ,CAAwBC,IAAxB,CAA6BF,IAA7B;AACH,eAFD,MAEO;AACHF,gBAAAA,YAAY,CAACE,IAAI,CAACC,IAAN,CAAZ,GAA0B,CAACD,IAAD,CAA1B;AACH;AACJ,aATU,CAUX;;AAVW;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAWKF,YAXL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWHK,UAAAA,IAXG;AAYDC,UAAAA,QAZC,GAYSN,YAAY,CAACK,IAAD,CAZrB;AAaHE,UAAAA,OAbG,GAaa,IAbb;;AAcP,cAAID,QAAQ,CAAC,CAAD,CAAR,CAAYE,UAAhB,EAA4B;AACxBF,YAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYE,UAAZ,CAAuBC,OAAvB,CAA+B,UAACC,IAAD,EAAQ;AACnC,kBAAIA,IAAI,CAACP,IAAL,KAAc,OAAlB,EAA2B;AACvBI,gBAAAA,OAAO,GAAGG,IAAI,CAACC,KAAf;AACH;AACJ,aAJD;AAKH;;AACKC,UAAAA,UArBC,GAqBY;AACfhB,YAAAA,KAAK,EAAEA,KADQ;AAEfiB,YAAAA,CAAC,EAAEP,QAAQ,CAAC,CAAD,CAAR,CAAYO,CAAZ,GAAcjB,KAAK,CAACE,GAAN,CAAUgB,SAFZ;AAGfC,YAAAA,CAAC,EAAET,QAAQ,CAAC,CAAD,CAAR,CAAYS,CAAZ,GAAcnB,KAAK,CAACE,GAAN,CAAUkB,UAHZ;AAIfC,YAAAA,KAAK,EAAEX,QAAQ,CAAC,CAAD,CAAR,CAAYW,KAAZ,GAAkBrB,KAAK,CAACE,GAAN,CAAUgB,SAJpB;AAKfI,YAAAA,MAAM,EAAEZ,QAAQ,CAAC,CAAD,CAAR,CAAYY,MAAZ,GAAmBtB,KAAK,CAACE,GAAN,CAAUkB,UALtB;AAMfG,YAAAA,IAAI,EAAE,eAAAb,QAAQ,CAAC,CAAD,CAAR,0DAAaO,CAAb,IAAejB,KAAK,CAACE,GAAN,CAAUgB,SAAzB,IAAsCR,QAAQ,CAAC,CAAD,CAAR,CAAYO,CAAZ,GAAcjB,KAAK,CAACE,GAAN,CAAUgB,SANrD;AAOfM,YAAAA,IAAI,EAAE,gBAAAd,QAAQ,CAAC,CAAD,CAAR,4DAAaS,CAAb,IAAenB,KAAK,CAACE,GAAN,CAAUkB,UAAzB,IAAuCV,QAAQ,CAAC,CAAD,CAAR,CAAYS,CAAZ,GAAcnB,KAAK,CAACE,GAAN,CAAUkB,UAPtD;AAQfb,YAAAA,IAAI,EAAEG,QAAQ,CAAC,CAAD,CAAR,CAAYH,IARH;AASfkB,YAAAA,KAAK,EAAEd,OAAO,IAAI,CATH;AAUfe,YAAAA,KAAK,EAAEhB,QAAQ,CAAC,CAAD,CAAR,CAAYiB,IAAZ,IAAoB;AAVZ,WArBZ;AAAA;AAiCP,iBAAM,IAAIC,iBAAJ,CAAaZ,UAAb,CAAN;;AAjCO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import Platform from '../components/Platform';\nimport { IMap, ILevelComponents } from '../ILevel';\n\nexport default function*(level: ILevelComponents, layer: string): Iterable<Platform>{\n    if(!level.map.getObjectLayer(layer)) return;\n    let platformSets: any= {}\n    for(let obj_ of level.map.getObjectLayer(layer).objects){\n        if(platformSets[obj_.name]){\n            platformSets[obj_.name].push(obj_)\n        } else {\n            platformSets[obj_.name] = [obj_];\n        }\n    }\n    // now we iterate through our new object and create the npcs\n    for(let plat in platformSets){\n        const platform= platformSets[plat]\n        let platDur: number=1000;\n        if (platform[0].properties) {\n            platform[0].properties.forEach((prop)=>{\n                if (prop.name === 'speed') {\n                    platDur = prop.value\n                }\n            })\n        }\n        const platConfig = {\n            level: level,\n            x: platform[0].x/level.map.tileWidth,\n            y: platform[0].y/level.map.tileHeight,\n            width: platform[0].width/level.map.tileWidth,\n            height: platform[0].height/level.map.tileHeight,\n            endX: platform[1]?.x/level.map.tileWidth || platform[0].x/level.map.tileWidth,\n            endY: platform[1]?.y/level.map.tileHeight || platform[0].y/level.map.tileHeight,\n            name: platform[0].name,\n            speed: platDur || 1,\n            ptype: platform[0].type || \"default\"\n        }\n        yield new Platform(platConfig)\n    }\n}\n"],"file":"createPlatformsFromLayer.js"}