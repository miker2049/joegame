{"version":3,"sources":["../../src/factories/createPathfinder.ts"],"names":["map","finder","easystar","js","mapgrid","acceptableTiles","Set","y","col","x","tile_","getTileAt","startIndex","layers","findIndex","l","name","slice","abovetiles","ltile","properties","collides","reduce","p","v","push","width","height","setGrid","setAcceptableTiles"],"mappings":";;;;;;;;;AAAA;;AAEe,kBAASA,GAAT,EAAoD;AAC/D,MAAIC,MAAM,GAAG,IAAIC,QAAQ,CAACC,EAAb,EAAb;AACA,MAAIC,OAAmB,GAAG,EAA1B;AACA,MAAIC,eAAe,GAAG,IAAIC,GAAJ,EAAtB;;AAH+D,6BAIvDC,CAJuD;AAK3D,QAAIC,GAAa,GAAG,EAApB;;AAL2D,iCAMnDC,CANmD;AAOvD;AACA,UAAMC,KAAK,GAAGV,GAAG,CAACW,SAAJ,CAAcF,CAAd,EAAgBF,CAAhB,EAAmB,IAAnB,EAAyB,MAAzB,CAAd,CARuD,CASvD;AACA;;AACA,UAAIG,KAAJ,EAAW;AACP,YAAME,UAAU,GAAGZ,GAAG,CAACa,MAAJ,CAAWC,SAAX,CAAqB,UAACC,CAAD;AAAA,iBAAKA,CAAC,CAACC,IAAF,KAAW,MAAhB;AAAA,SAArB,CAAnB;AACA,YAAMH,MAAM,GAAGb,GAAG,CAACa,MAAJ,CAAWI,KAAX,CAAiBL,UAAjB,CAAf,CAFO,CAEqC;;AAC5C,YAAMM,UAAoB,GAAGL,MAAM,CAACb,GAAP,CAAW,UAACe,CAAD,EAAK;AAAA;;AACzC,cAAMI,KAAK,4BAAGnB,GAAG,CAACW,SAAJ,CAAcF,CAAd,EAAgBF,CAAhB,EAAkB,IAAlB,EAAuBQ,CAAC,CAACC,IAAzB,EAA+BI,UAAlC,0DAAG,sBAA2CC,QAAzD;AACA,iBAAOF,KAAK,KAAK,IAAV,GAAiB,CAAjB,GAAqB,CAA5B;AACH,SAH4B,CAA7B;;AAIA,YAAGD,UAAU,CAACI,MAAX,CAAkB,UAACC,CAAD,EAAGC,CAAH,EAAO;AAAC,iBAAOD,CAAC,GAACC,CAAT;AAAW,SAArC,MAAyC,CAA5C,EAA8C;AAC1ChB,UAAAA,GAAG,CAACiB,IAAJ,CAAS,CAAT;AACH,SAFD,MAEO;AACHjB,UAAAA,GAAG,CAACiB,IAAJ,CAAS,CAAT;AACH;AACJ,OAZD,MAYO;AACHjB,QAAAA,GAAG,CAACiB,IAAJ,CAAS,CAAT;AACH;AAzBsD;;AAM3D,SAAI,IAAIhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,GAAG,CAAC0B,KAAvB,EAA8BjB,CAAC,EAA/B,EAAkC;AAAA,aAA1BA,CAA0B;AAqBjC;;AACDL,IAAAA,OAAO,CAACqB,IAAR,CAAajB,GAAb;AA5B2D;;AAI/D,OAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,GAAG,CAAC2B,MAAvB,EAA+BpB,CAAC,EAAhC,EAAmC;AAAA,UAA3BA,CAA2B;AAyBlC;;AACDN,EAAAA,MAAM,CAAC2B,OAAP,CAAexB,OAAf;AACAH,EAAAA,MAAM,CAAC4B,kBAAP,CAA0B,CAAC,CAAD,CAA1B;AACA,SAAO5B,MAAP;AACH","sourcesContent":["import * as easystar from 'easystarjs';\n\nexport default function(map: Phaser.Tilemaps.Tilemap): easystar.js {\n    let finder = new easystar.js()\n    let mapgrid: number[][] = [];\n    let acceptableTiles = new Set<number>();\n    for(let y = 0; y < map.height; y++){\n        let col: number[] = [];\n        for(let x = 0; x < map.width; x++){\n            //NOTE hardcoded layer to get collision info\n            const tile_ = map.getTileAt(x,y, true, \"Main\");\n            //check if collide\n            // if there is tile (that is not empty and not collides) and additionally none of the other tiles have collision,\n            if (tile_) {\n                const startIndex = map.layers.findIndex((l)=>l.name === 'Main')\n                const layers = map.layers.slice(startIndex) //ignore lower layers\n                const abovetiles: number[] = layers.map((l)=>{\n                    const ltile = map.getTileAt(x,y,true,l.name).properties?.collides\n                    return ltile === true ? 1 : 0\n                })\n                if(abovetiles.reduce((p,v)=>{return p+v})===0){\n                    col.push(1)\n                } else {\n                    col.push(0)\n                }\n            } else {\n                col.push(0)\n            }\n\n        }\n        mapgrid.push(col);\n    }\n    finder.setGrid(mapgrid)\n    finder.setAcceptableTiles([1])\n    return finder\n}\n"],"file":"createPathfinder.js"}