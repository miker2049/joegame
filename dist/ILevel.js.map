{"version":3,"sources":["../src/ILevel.ts"],"names":[],"mappings":";;AAAA","sourcesContent":["import 'phaser'\nimport { ICharacter } from './ICharacter';\nimport { IMachineRegistry } from './components/MachineRegistry';\nimport { BondageResults } from 'bondage';\n\nexport interface IMapData {\n    tileWidth: number\n    tileHeight: number\n    height: number\n    width: number\n    tilesets: Phaser.Tilemaps.Tileset[]\n}\n\nexport interface IMapMethods {\n    getObjectLayer(layer: string): Phaser.Tilemaps.ObjectLayer\n    getLayer(layer: string): Phaser.Tilemaps.LayerData\n    getTileAt(x: number, y: number, nonNull: boolean, layer: string): {index: number, properties?: {collides?: boolean}}\n}\n\nexport interface IMap extends IMapData, IMapMethods {}\n\nexport interface DialogueRunner {\n   getRunner(node:string): Generator<BondageResults,BondageResults,undefined>\n}\nexport interface ILevelComponents {\n    map: Phaser.Tilemaps.Tilemap\n    player?: ICharacter\n    pathfinder: IPathfinder\n    npcs: Phaser.Physics.Arcade.Group\n    platforms: Phaser.Physics.Arcade.Group\n    scene: Phaser.Scene\n    machineRegisty: IMachineRegistry\n    key: string\n}\n\nexport interface IPathfinder {\n    avoidAdditionalPoint(x: number, y: number): void\n    stopAvoidingAdditionalPoint(x: number, y: number): void\n    findPath(x: number, y: number, dx: number, dy: number, cb: (path:any)=>void): number\n    calculate(): void\n}\n"],"file":"ILevel.js"}