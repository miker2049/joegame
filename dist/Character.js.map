{"version":3,"sources":["../src/Character.ts"],"names":["Character","config","level","scene","x","y","speed","name","dashDistance","charge","animKeys","anims","dashDrag","dashVel","sprite","make","key","texture","removeFromDisplayList","voxbox","VoxBox","close","setDepth","depth","defaults","charDepth","face","Dir","south","facing","onPlatform","auto","player","groundVel","setScale","scale","setInteractive","Phaser","Geom","Circle","map","tileWidth","Contains","physics","world","enable","Physics","Arcade","DYNAMIC_BODY","charBody","body","add","setSize","width","height","tileHeight","setPosition","setOffset","offsetX","offsetY","platform","overlap","platforms","plat","undefined","velocity","dir","allowDrag","playAnim","setVelocity","Math","Vector2","VelocityMap","showDashboxes","setDrag","setAcceleration","stopAnim","dirAnim","get","setCurrentFrame","frames","x_","floor","center","y_","transport","console","log","jumpUp","north","transportNudge","align","east","west","anim","play","delay","repeat","frameRate","startFrame","stop","msg","speak","GameObjects","Container"],"mappings":"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","sourcesContent":["import 'phaser';\nimport jumpUp from './actions/charJumpUp'\nimport { CharacterConfig, ICharacter } from './ICharacter'\nimport { ILevelComponents, IPathfinder } from './ILevel'\nimport { CharMoveAnims, Dir, VelocityMap } from './joegameTypes'\nimport getDashVelForDistance from './utils/getDashVelForDistance'\nimport defaults from './defaults'\nimport createResidualGraphic from './actions/createResidualGraphic'\nimport VoxBox from './components/VoxBox';\n\nexport default class Character extends Phaser.GameObjects.Container implements ICharacter {\n\n    //settings\n    speed: number\n    readonly name: string\n    dashDistance: number\n    charge: number\n    readonly animKeys: CharMoveAnims\n\n    //private seetings\n    dashDrag: number\n    dashVel: number\n    sprite: Phaser.GameObjects.Sprite\n    voxbox: VoxBox\n\n    //state\n    public depth: number\n    public facing: Dir\n    public onPlatform: boolean\n    public auto: boolean\n    public player: boolean\n    public groundVel: Phaser.Types.Math.Vector2Like\n\n\n    charBody: Phaser.Physics.Arcade.Body\n\n    level: ILevelComponents\n\n    constructor(config: CharacterConfig) {\n        super(config.level.scene, config.x, config.y)\n        this.level = config.level\n        //assign settings from config\n        this.speed = config.speed\n        this.name = config.name\n        this.dashDistance = config.dashDistance\n        this.charge = 2;\n        this.animKeys = config.anims;\n\n        this.dashDrag = 300\n        this.dashVel = getDashVelForDistance(this.dashDistance, this.dashDrag)\n        this.sprite = config.level.scene.make.sprite({ key: config.texture }, false)\n        this.sprite.removeFromDisplayList()\n        this.voxbox = new VoxBox(this.level)\n        this.voxbox.close()\n\n        this.setDepth(this.depth = config.depth || defaults.charDepth)\n        this.face(Dir.south)\n        this.facing = Dir.south\n        this.onPlatform = false\n        this.auto = false\n        this.player = false\n        this.groundVel = { x: 0, y: 0 }\n\n        // this.sprite.setTintFill(Phaser.Display.Color.RandomRGB().color)\n\n        // this.setSize(this.scene.tileWidth/2,this.scene.tileHeight/2)\n        this.sprite.setScale(config.scale)\n        this.setInteractive(new Phaser.Geom.Circle(0, 0, this.level.map.tileWidth * 2), Phaser.Geom.Circle.Contains)\n\n        this.level.scene.physics.world.enable(this, Phaser.Physics.Arcade.DYNAMIC_BODY)\n        this.charBody = this.body as Phaser.Physics.Arcade.Body\n\n        this.add(this.sprite)\n\n        this.charBody.setSize(config.body?.width || this.level.map.tileWidth * 0.5, config.body?.height || this.level.map.tileHeight * 0.5)\n        this.sprite.setPosition(this.charBody.width / 2, 0)\n        this.charBody.setOffset(config.body?.offsetX || 0, config.body?.offsetY || 0)\n\n        this.add(this.voxbox)\n\n\n        // this.sprite.on('animationstart', (anim, frame) => { console.log(`start of ${anim}`) })\n        // this.sprite.on('animationrepeat', (anim, frame) => { console.log(`update of ${anim}`) })\n        // this.sprite.on('animationupdate', (anim, frame) => {\n        //     console.log(`is ${anim}, frame is ${frame}`)\n        // })\n\n        // let pnt=this.scene.make.graphics({x:0,y:0}).fillStyle(Phaser.Display.Color.GetColor(255,0,0)).fillCircle(this.charBody.width/2,this.charBody.height/2,1).setDepth(10)\n        // let pnt2=this.scene.make.graphics({x:0,y:0}).fillStyle(Phaser.Display.Color.GetColor(0,255,0)).fillCircle(this.charBody.top,0,1).setDepth(10)\n        // let pnt=this.scene.make.graphics({x:0,y:0}).fillStyle(Phaser.Display.Color.GetColor(255,0,0)).fillCircle(0,0,1).setDepth(10)\n        // this.add([pnt2])\n    }\n\n    //control\n    changeGroundVel(): void {\n        let platform: Phaser.Types.Physics.Arcade.GameObjectWithDynamicBody\n        this.scene.physics.world.overlap(this, this.level.platforms, (player, plat) => {\n            platform = plat as Phaser.Types.Physics.Arcade.GameObjectWithDynamicBody\n            if (platform != undefined) {\n                this.groundVel = { x: platform.body.velocity.x, y: platform.body.velocity.y }\n            } else {\n                this.groundVel = { x: 0, y: 0 }\n            }\n        })\n    }\n    move(dir: Dir): void {\n        this.charBody.allowDrag = false\n        this.facing = dir;\n        this.playAnim(this.animKeys[Dir[dir]]);\n        this.charBody.setVelocity(this.groundVel.x || 0, this.groundVel.y || 0) // this is needed again to cancel diagonole shit\n        this.charBody.velocity.add(new Phaser.Math.Vector2(this.speed * VelocityMap[dir][0], this.speed * VelocityMap[dir][1]))\n    }\n    dash(dir: Dir): void {\n        this.showDashboxes();\n        this.charBody.allowDrag = true\n        this.charBody.setDrag(this.dashDrag, this.dashDrag)\n        this.charBody.setVelocity(0)\n        this.charBody.setAcceleration(0, 0)\n        this.face(dir)\n        this.stopAnim()\n        this.charBody.setVelocity(this.dashVel * VelocityMap[dir][0] + (this.groundVel.x || 0), this.dashVel * VelocityMap[dir][1] + (this.groundVel.y || 0))\n        createResidualGraphic(this.sprite, this.x, this.y)\n    }\n\n    face(dir: Dir): void {\n        const dirAnim = this.scene.anims.get(this.animKeys[dir])\n        //NOTE this if should be unecessary\n        if (dirAnim) {\n            this.sprite.anims.setCurrentFrame(dirAnim.frames[1])\n            this.facing = dir\n        }\n    }\n    stop(face?: Dir): void {\n        this.charBody.allowDrag = false\n        this.charBody.setVelocity(this.groundVel.x || 0, this.groundVel.y || 0)\n        this.stopAnim()\n        if (face) {\n            this.face(face)\n            this.facing = face\n        }\n    }\n    align(): Phaser.Types.Math.Vector2Like {\n        const x_ = (Math.floor((this.charBody.center.x) / this.level.map.tileWidth) * this.level.map.tileWidth)\n        const y_ = (Math.floor((this.charBody.center.y) / this.level.map.tileHeight) * this.level.map.tileHeight)\n        this.transport(x_ + this.level.map.tileWidth / 2, y_ + this.level.map.tileHeight / 2)\n        // this.transport(x_, y_)\n        return { x: x_ / this.level.map.tileWidth, y: (y_ / this.level.map.tileHeight) }\n    }\n\n    jumpUp(): void {\n        jumpUp(this)\n    }\n\n    /*\n     * The dir here marks the direction where you are jumping back from\n     */\n    jumpBack(dir: Dir): void {\n        console.log(this.name + \" is jumping!\")\n        this.jumpUp()\n        switch (dir) {\n            //if collider.body.touching.up\n            case Dir.north: {\n                this.face(Dir.north)\n                this.transportNudge(0, 8)\n                this.align()\n                break\n            }\n            case Dir.south: {\n                this.face(Dir.south)\n                this.transportNudge(0, -8)\n                this.align()\n                break\n            }\n            case Dir.east: {\n                this.face(Dir.east)\n                this.transportNudge(-8, 0)\n                this.align()\n                break\n            }\n            case Dir.west: {\n                this.face(Dir.west)\n                this.transportNudge(8, 0)\n                this.align()\n                break\n            }\n        }\n    }\n\n    transport(x: number, y: number): void { this.setPosition(x + (this.x - this.charBody.center.x), y + (this.y - this.charBody.center.y)) }\n    transportNudge(x: number, y: number): void { this.setPosition(this.x + x, this.y + y) }\n\n    minusCharge(): void { }\n    playAnim(anim: string): void {\n        this.sprite.anims.play({ key: anim, delay: 0, repeat: -1, frameRate: 11, startFrame: 1 }, false)\n    }\n    stopAnim(): void {\n\n        this.sprite.anims.stop()\n        const dirAnim = this.scene.anims.get(this.animKeys[this.facing])\n        this.sprite.anims.setCurrentFrame(dirAnim.frames[1])\n    }\n\n    // UI control\n    showDashboxes(): void { }\n    minusDashbox(): void { }\n    showLabel(): void { }\n    hideLabel(): void { }\n\n    async speak(msg: string, speed?: number): Promise<void> {\n        await this.voxbox.speak(msg, speed ?? 25)\n        // console.log(msg)\n    }\n\n\n    //move machine\n    // sendMsgToMoveMachine(msg: string): void { }\n    // startMoveMachine(): void { }\n    // pauseMoveMachine(): void { }\n    // killMoveMachine(): void { }\n}\n"],"file":"Character.js"}