{"version":3,"sources":["../../src/actions/moveToTile.ts"],"names":["moveOnPath","params","tweens","pathTransitions","transition","push","getTileMoveTween","charControl","tileSize","speed","targets","charBody","duration","onComplete","finalFacing","undefined","face","stop","cb","tweener","timeline","moveToTile","charController","align","tempObsX","tempObsY","finder","avoidAdditionalPoint","findPath","x","y","dx","dy","path","console","log","fpParams","createTransitions","tileWidth","calculate","stopAvoidingAdditionalPoint","transitions","i","length","xDiff","yDiff","pathTransition","char","paused","onStart","tween","param","state","getStateFromTransition","move","Dir","ease","east","west","south","north"],"mappings":"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","sourcesContent":["import 'phaser'\nimport {Dir} from '../joegameTypes'\nimport {ICharacterControl} from '../ICharacter'\nimport { IPathfinder } from '../ILevel';\nimport ensure from '../utils/ensure';\n\ninterface moveOnPathParams {\n    pathTransitions: Phaser.Types.Math.Vector2Like[]\n    tweener: Phaser.Tweens.TweenManager\n    charControl: ICharPathMoveControl\n    finalFacing?: Dir\n    tileSize: number\n    speed: number\n    cb: (s: string)=>void\n}\n\ninterface ICharPathMoveControl {\n    face(dir: Dir): void\n    move(dir: Dir): void\n    stop(): void\n    align(): void\n    charBody: Phaser.Physics.Arcade.Body\n}\nfunction moveOnPath(params: moveOnPathParams): Phaser.Tweens.Timeline{\n    // this.char.body.allowDrag = false;\n    let tweens: Array<Phaser.Types.Tweens.TweenBuilderConfig> = [] ;\n    for(let transition of params.pathTransitions){\n        tweens.push(getTileMoveTween(transition,params.charControl,params.tileSize, params.speed) as Phaser.Tweens.Tween)\n    }\n    tweens.push({\n        targets: [params.charControl.charBody],\n        duration: 100,\n        onComplete: ()=>{\n            if (params.finalFacing != undefined){\n                params.charControl.face(params.finalFacing)\n            }\n            params.charControl.stop()\n            params.cb\n        },\n    })\n    return params.tweener.timeline({tweens: tweens})\n}\n\nexport interface moveToTileParams {\n    x: number\n    y: number\n    dx: number\n    dy: number\n    tempObsX?: number\n    tempObsY?: number\n    tileWidth: number\n    tileHeight: number\n    finalFacing?: Dir\n    charController: ICharPathMoveControl\n    finder: IPathfinder\n    tweener: Phaser.Tweens.TweenManager\n    speed: number\n    cb: (s: string)=>void\n}\nexport function moveToTile(params: moveToTileParams): Phaser.Tweens.Timeline | string {\n    let timeline: Phaser.Tweens.Timeline | string = 'NO_PATH'\n    // destroy the current tween timeline that is running\n    // this.char.destTimeline.destroy();\n    //This janky movement doesnt seem to matter so much when you start moving and animating, makes sure the distance calculations are correct too\n    params.charController.align()\n    // get the players current tile\n    // here the callback first takes the path and makes it in to a bunch of (-1/0/1,-1/0/1) type transitions, then puts that into the path function\n    if(params.tempObsX != undefined && params.tempObsY != undefined){\n        params.finder.avoidAdditionalPoint(params.tempObsX,params.tempObsY);\n    }\n    params.finder.findPath(params.x,params.y,params.dx,params.dy,(path)=>{\n        console.log(path)\n        if (path) {\n            const fpParams: moveOnPathParams = {\n                pathTransitions: createTransitions(path),\n                tweener: params.tweener,\n                charControl: params.charController,\n                tileSize: params.tileWidth,\n                speed: params.speed,\n                cb: params.cb,\n            }\n            timeline = moveOnPath(fpParams)\n        } else {\n            //TODO handle no path\n            timeline = 'NO_PATH'\n        }\n    });\n    params.finder.calculate();\n    if(params.tempObsX != undefined && params.tempObsY != undefined){\n        params.finder.stopAvoidingAdditionalPoint(params.tempObsX,params.tempObsY);\n    }\n    return timeline\n}\n\nfunction createTransitions(path:Phaser.Types.Math.Vector2Like[]):Phaser.Types.Math.Vector2Like[] {\n    let transitions: Phaser.Types.Math.Vector2Like[] = [];\n    for (let i =1; i<path.length;i++) {\n        const xDiff = ensure(path[i].x) - ensure(path[i-1].x);\n        const yDiff = ensure(path[i].y) - ensure(path[i-1].y);\n        transitions.push({x: xDiff, y: yDiff})\n\n    }\n    return transitions;\n}\n\nfunction getTileMoveTween(pathTransition: Phaser.Types.Math.Vector2Like, char: ICharPathMoveControl, tileSize: number, speed: number): Phaser.Types.Tweens.TweenBuilderConfig {\n    //accelration is the bodies change in velocity in pixels per second squared\n    // velocity is pixels per second\n    // we need to move exactly 8 pixels\n    // ok but sometimes we are at top speed and sometimes not\n    // 16\n    console.log(( (tileSize)/speed ) * 1000)\n    return {\n        targets: [],\n        paused: false,\n        onStart: (tween, targets, param)=>{\n            const state = getStateFromTransition(pathTransition)\n            console.log(state)\n            char.move(Dir[state])\n        },\n        duration: ( (tileSize)/speed ) * 1000, //have to disallow drag here for this\n        ease: 'Stepped'\n    }\n}\n\n//TODO everything should use dir enum...\nfunction getStateFromTransition(pathTransition: Phaser.Types.Math.Vector2Like){\n    if (pathTransition.x === 1 && pathTransition.y === 0 ){\n        return Dir.east;\n        // return 'east';\n    } else if (pathTransition.x === -1 && pathTransition.y === 0 ){\n        return Dir.west;\n        // return 'west';\n    } else if (pathTransition.x === 0 && pathTransition.y === 1 ){\n        return Dir.south;\n        // return 'south';\n    } else if (pathTransition.x === 0 && pathTransition.y === -1 ){\n        return Dir.north;\n        // return 'north';\n    } else {\n        return Dir.north;\n        // return 'north';\n    }\n}\n\n"],"file":"moveToTile.js"}