{"version":3,"sources":["../../src/actions/moveDistance.ts"],"names":["THRESHOLD","DELAY","params","Promise","res","rej","axis","dest","dir","Dir","north","Axis","yaxis","gobject","y","distance","south","east","x","xaxis","west","timeRun","move","setTimeout","undefined","speed"],"mappings":";;;;;;;AAAA;;AAMA,IAAMA,SAAS,GAAG,IAAlB;AACA,IAAMC,KAAK,GAAG,CAAd;;AAmBe,kBAASC,MAAT,EAAoD;AAC/D,SAAO,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,QAAIC,IAAJ;AACA,QAAIC,IAAJ;;AACA,YAAQL,MAAM,CAACM,GAAf;AACI,WAAKC,kBAAIC,KAAT;AACIJ,QAAAA,IAAI,GAAGK,mBAAKC,KAAZ;AACAL,QAAAA,IAAI,GAAGL,MAAM,CAACW,OAAP,CAAeC,CAAf,GAAmBZ,MAAM,CAACa,QAAjC;AACA;;AACJ,WAAKN,kBAAIO,KAAT;AACIV,QAAAA,IAAI,GAAGK,mBAAKC,KAAZ;AACAL,QAAAA,IAAI,GAAGL,MAAM,CAACW,OAAP,CAAeC,CAAf,GAAmBZ,MAAM,CAACa,QAAjC;AACA;;AACJ,WAAKN,kBAAIQ,IAAT;AACIV,QAAAA,IAAI,GAAGL,MAAM,CAACW,OAAP,CAAeK,CAAf,GAAmBhB,MAAM,CAACa,QAAjC;AACAT,QAAAA,IAAI,GAAGK,mBAAKQ,KAAZ;AACA;;AACJ,WAAKV,kBAAIW,IAAT;AACIb,QAAAA,IAAI,GAAGL,MAAM,CAACW,OAAP,CAAeK,CAAf,GAAmBhB,MAAM,CAACa,QAAjC;AACAT,QAAAA,IAAI,GAAGK,mBAAKQ,KAAZ;AACA;AAhBR;;AAkBA,QAAIE,OAAO,GAAG,CAAd;AACAnB,IAAAA,MAAM,CAACW,OAAP,CAAeS,IAAf,CAAoBpB,MAAM,CAACM,GAA3B;AACAe,IAAAA,UAAU,CAAC,YAAM;AACbnB,MAAAA,GAAG,CAACoB,SAAD,CAAH;AACH,KAFS,EAENtB,MAAM,CAACa,QAAP,GAAkBb,MAAM,CAACW,OAAP,CAAeY,KAAlC,GAA2C,IAFpC,CAAV,CAvB6B,CA0B7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAvCM,CAAP;AAwCH","sourcesContent":["import { Dir, Axis } from '../joegameTypes'\nimport { interval } from 'rxjs'\nimport { map, takeWhile } from 'rxjs/operators'\n\nimport { Interpreter } from 'xstate'\nimport { MoveMachineContext } from '../components/MoveMachine'\nconst THRESHOLD = 0.25\nconst DELAY = 2\n\nexport interface ImoveDistanceObject {\n    x: number\n    y: number\n    speed: number\n    move(dir: Dir): void\n    stop(face?: Dir): void\n    align(): Phaser.Types.Math.Vector2Like\n\n}\n\ninterface ImoveDistanceParams {\n    gobject: ImoveDistanceObject\n    dir: Dir\n    distance: number\n    stop?: boolean\n}\n\nexport default function(params: ImoveDistanceParams): Promise<any> {\n    return new Promise((res, rej) => {\n        let axis: Axis\n        let dest: number\n        switch (params.dir) {\n            case Dir.north:\n                axis = Axis.yaxis\n                dest = params.gobject.y - params.distance\n                break\n            case Dir.south:\n                axis = Axis.yaxis\n                dest = params.gobject.y + params.distance\n                break\n            case Dir.east:\n                dest = params.gobject.x + params.distance\n                axis = Axis.xaxis\n                break\n            case Dir.west:\n                dest = params.gobject.x - params.distance\n                axis = Axis.xaxis\n                break\n        }\n        let timeRun = 0\n        params.gobject.move(params.dir)\n        setTimeout(() => {\n            res(undefined)\n        }, (params.distance / params.gobject.speed) * 1000)\n        // var inter = setInterval(() => {\n        //     const target = axis === Axis.yaxis ? params.gobject.y : params.gobject.x\n        //     if (Math.abs(dest - target) < THRESHOLD || target > dest) {\n        //         clearInterval(inter)\n        //         if (params.stop === true) params.gobject.stop()\n        //         res(undefined)\n        //     }\n        //     if (((params.distance / params.gobject.speed) * 1000) / (timeRun * DELAY) < 1 / 2) {\n        //         clearInterval(inter)\n        //     }\n        //     timeRun++\n        // }, DELAY)\n        // params.moveMachine.onTransition(state=> state.value != 'onPath' ? clearInterval(inter) : undefined )\n    })\n}\n"],"file":"moveDistance.js"}