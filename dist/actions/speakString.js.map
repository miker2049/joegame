{"version":3,"sources":["../../src/actions/speakString.ts"],"names":["str","char","speakFunc","speed","words","replace","split","wlength","length","i","syllable","randArr","randArrayAndSum","numbers","chunk2","j","delay","globalDefaults","talkingSpeed","loc","x","scene","cameras","main","worldView","centerX","y","centerY","contains","vAndp","width","inst","buff","undefined","rate","vol","pan","sum","arr","push","Math","random","reduce","pr","val","n","out","slice"],"mappings":"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","sourcesContent":["import 'phaser'\n// import { chunk } from 'lodash'\nimport { ILevelComponents } from '../ILevel'\nimport timeout from '../utils/awaitTimeout'\nimport globalDefaults from '../defaults'\nimport { syllableCount } from '../utils/syllableCount'\nimport { ITalkingPlayConfig } from '../sound/synths/Talking'\nimport { hashToArr } from '../utils/hashToArr'\nimport { assert } from 'tone/build/esm/core/util/Debug'\nimport { getVolAndPanFromDistance } from '../utils/getVolPanFromDist'\nexport default async function(str: string, char: { x?: number, y?: number, name?: string, scene: Phaser.Scene, }, speakFunc: (config: ITalkingPlayConfig) => void, speed?: number): Promise<void> {\n    // if (!(Phaser.Geom.Rectangle.ContainsPoint(char.scene.cameras.main.getBounds(), new Phaser.Geom.Point(char.x, char.y)))) return\n\n    const words = str.replace(/[^A-Za-z0-9]/g, ' ').split(' ')\n    const wlength = words.length\n    // const ttime = ((speed ?? globalDefaults.talkingSpeed) * str.replace(' ', '').length) +\n    //     ((str.match(/\\s/g)?.length ?? 0) * (globalDefaults.talkingSpeed * 1.7))\n    for (let i = 0; i < wlength; i++) {\n        // console.log(hashCode(words[i]))\n        const syllable = syllableCount(words[i])\n        if (words[i].length > 0) {\n            const randArr = randArrayAndSum(syllable)\n            // need two indexes for each syllable, for vowel (buff) and rate (pitch)\n            // TODO remove lodash dependency!!!\n            const numbers = chunk2(hashToArr(words[i], syllable * 2), 2)\n            assert(hashToArr(words[i], syllable * 2).length == syllable * 2, `hashtoArr returns the right word:\"${words[i]}\"  ${syllable} AND ${hashToArr(words[i], syllable * 2)}`)\n\n            assert(randArr[0].length === numbers.length, `not same laengthss ${words[i]} ${randArr[0].length}  ${numbers.length}`)\n            for (let j = 0; j < randArr[0].length; j++) {\n                const delay = (randArr[0][j] / randArr[1]) * (words[i].length * globalDefaults.talkingSpeed)\n                const loc = {\n                    x: char.x || char.scene.cameras.main.worldView.centerX,\n                    y: char.y || char.scene.cameras.main.worldView.centerY,\n                }\n                if (char.scene.cameras.main.worldView.contains(loc.x, loc.y) == true) {\n                    const vAndp = getVolAndPanFromDistance(\n                        char.scene.cameras.main.worldView.centerX,\n                        char.scene.cameras.main.worldView.centerX,\n                        loc.x,\n                        loc.y,\n                        char.scene.cameras.main.worldView.width\n                    )\n                    speakFunc({\n                        inst: 'talking',\n                        buff: numbers[j][0] ?? undefined,\n                        rate: numbers[j][1] ?? undefined,\n                        vol: vAndp[0],\n                        pan: vAndp[1]\n                    })\n                }\n                await timeout(delay)\n            }\n            await timeout(globalDefaults.talkingSpeed * 2)\n        }\n    }\n    return\n}\n\nfunction randArrayAndSum(length: number): [number[], number] {\n    let sum = 0\n    let arr = []\n    for (let i = 0; i < length; i++) {\n        arr.push(Math.random())\n    }\n    return [arr, arr.reduce((pr, val) => pr + val)]\n}\n\nfunction chunk2(arr: any[], n: number): number[][] {\n    let out = []\n    for (let i = 0; i < arr.length; i += n) {\n        out.push(arr.slice(i, i + n))\n    }\n    return out\n}\n"],"file":"speakString.js"}