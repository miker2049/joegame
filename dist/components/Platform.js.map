{"version":3,"sources":["../../src/components/Platform.ts"],"names":["Platform","config","level","scene","x","map","tileWidth","y","tileHeight","setName","name","endX","endY","ptype","cache","json","get","platform","tileSize","tiles","i","width","j","height","groundVersion","groundTiles","Math","floor","random","length","push","add","image","texture","setOrigin","setDepth","defaults","platformDepth","edgeTiles","setSize","console","log","physics","world","enable","body","setOffset","runPlatform","distance","Phaser","Distance","Between","delay","speed","velX","abs","velY","atHome","setMaxSpeed","cb","newVelX","newVelY","setVelocity","notifyVelChange","time","addEvent","callback","snapX","snapY","setAcceleration","pause","loop","overlap","platforms","player","plat","machineRegisty","sendTo","type","vel","velocity","GameObjects","Container"],"mappings":"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","sourcesContent":["import 'phaser';\nimport  closestMultiple from '../utils/closestMultiple';\nimport  defaults  from '../defaults';\nimport { IMap, ILevelComponents } from '../ILevel';\nimport { wikiPlatformEntry } from '~/utils/parseWikiData';\n\n\n\ninterface PlatformConfig {\n    level: ILevelComponents\n    x: number\n    y: number\n    width: number\n    height: number\n    endX?: number\n    endY?: number\n    speed: number\n    name: string\n    ptype?: string\n}\n\nexport default class Platform extends Phaser.GameObjects.Container {\n    speed: number = 5\n    acceleration: number = 100\n    pause: number = 2000\n    velX: number = 0\n    velY: number = 0\n    atHome: boolean = true\n    tileSize: number = 16\n    body: Phaser.Physics.Arcade.Body\n    level: ILevelComponents\n\n\n\n    constructor(config: PlatformConfig ) {\n\n        super(config.level.scene,config.x*config.level.map.tileWidth,config.y*config.level.map.tileHeight)\n        this.level = config.level\n\n        this.setName(config.name || `${config.x}x${config.y}x${config.endX}x${config.endY}`)\n        //TODO make this dynamic\n        const ptype = this.scene.cache.json.get('gdata').platform.get(config.ptype || 'default') as wikiPlatformEntry\n        this.tileSize = config.level.map.tileWidth\n        let tiles: Phaser.GameObjects.GameObject[]=[];\n        for(let i =0; i<config.width; i++){\n            for(let j=0; j< config.height; j++){\n                let groundVersion = ptype.groundTiles[Math.floor(Math.random()*ptype.groundTiles.length)]\n                tiles.push(this.scene.add.image(i*config.level.map.tileWidth,j*config.level.map.tileHeight,ptype.texture,groundVersion).setOrigin(0,0).setDepth(defaults.platformDepth))\n                if(j===config.height-1){\n                    tiles.push(this.scene.add.image(i*config.level.map.tileWidth,(j*config.level.map.tileHeight)+config.level.map.tileHeight,ptype.texture,ptype.edgeTiles[0])\n                        .setOrigin(0,0)\n                        .setDepth(defaults.platformDepth-1))\n                }\n            }\n        }\n        this.setSize(config.width*config.level.map.tileWidth,config.height*config.level.map.tileHeight)\n        this.add(tiles);\n        console.log(tiles)\n        // this.body = new Phaser.Physics.Arcade.Body(this.scene.physics.world,this)\n        this.scene.physics.world.enable(this)\n        this.body.setOffset(( config.width * config.level.map.tileWidth )/2,( config.height * config.level.map.tileHeight )/2)\n        this.runPlatform(config)\n\n    }\n\n    runPlatform(config: PlatformConfig){\n\n        let distance = Phaser.Math.Distance.Between(config.x,config.y,config.endX||config.x,config.endY||config.y)*this.tileSize\n        const delay = ( config.speed || 1 ) * 1000;\n        const speed = Math.floor(distance/( delay/1000 ));\n\n        this.velX = Math.abs((config.endX || config.x) - config.x) > 1 ? (config.endX || config.x) > config.x ? speed : -speed : 0;\n        this.velY = Math.abs((config.endY || config.y) - config.y) > 1 ? (config.endY || config.y) > config.y ? speed : -speed : 0;\n        this.velX = this.velX * -1;\n        this.velY = this.velY * -1;\n\n        this.atHome = false;\n        this.body.setMaxSpeed(speed)\n        const cb = ()=>{\n            const newVelX = this.velX\n            const newVelY = this.velY\n            // const accelX = this.velX != 0 ? this.velX > 0 ?  defaults.globalDrag : -defaults.globalDrag : 0\n            // const accelY = this.velY != 0 ? this.velY > 0 ?  defaults.globalDrag : -defaults.globalDrag : 0\n            // this.body.setAcceleration(accelX,accelY)\n            this.body.setVelocity(newVelX,newVelY)\n            this.notifyVelChange()\n        }\n        this.scene.time.addEvent({\n            callback: ()=>{\n                this.atHome= !!!this.atHome;\n                const snapX = this.atHome ? config.x : config.endX || config.x\n                const snapY = this.atHome ? config.y : config.endY || config.y\n\n                this.body.setAcceleration(0,0)\n                this.body.setVelocity(0,0)\n\n                this.velX = this.velX * -1;\n                this.velY = this.velY * -1;\n\n                this.body.x = this.x = closestMultiple(snapX * this.tileSize,this.tileSize)\n                this.body.y = this.y = closestMultiple(snapY * this.tileSize,this.tileSize)\n                this.notifyVelChange()\n                this.scene.time.addEvent({\n                    callback: cb,\n                    delay: this.pause\n                })\n            },\n            delay: delay + this.pause,\n            loop:true,\n        })\n    }\n    notifyVelChange(){\n        //todo, we need a all player group or something, for when we want npcs on platforms\n        // let test= this.scene.physics.overlap(this, this.scene.player, (plat, player)=>{\n        //     const char = player as Character;\n        //     char.moveMachine.send('PLATFORM_CHANGE', {vel: {x: plat.body.velocity.x, y: plat.body.velocity.y}})\n        // })\n        // this.scene.physics.overlap(this, this.scene.map.objbody,(plat,obj)=>{\n        //     obj.moveMachine.send('PLATFORM_CHANGE', {vel: {x: plat.body.velocity.x, y: plat.body.velocity.y}})\n        this.level.scene.physics.overlap(this.level.platforms, this.level.player, (player, plat)=>{\n            console.log('HEY')\n            this.level.machineRegisty.sendTo(\"player_machine\",{type: 'PLATFORM_CHANGE', vel: {x: plat.body.velocity.x, y: plat.body.velocity.y}})\n        })\n    }\n\n}\n"],"file":"Platform.js"}