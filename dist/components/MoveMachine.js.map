{"version":3,"sources":["../../src/components/MoveMachine.ts"],"names":["createPathmoveMachine","name","id","initial","states","gettingpath","invoke","src","context","event","charPlace","char","align","x","y","dx","destTile","dy","tempObsX","tempObsTile","tempObsY","finder","onDone","actions","path","data","target","movingOnPath","length","direction","gobject","dir","distance","tileSize","stop","console","log","slice","cond","reachedDestination","type","MoveMachineConfig","character","key","entry","on","TRANSPORT","still","MOVE","MOVE_ON_PATH","DASH","STOP","PLATFORM_CHANGE","BUMP","onPath","tile","point","_context","tempObs","DESTINATION_REACHED","NO_PATH","moving","LEAVE_PLATFORM","dashing","after","DASH_DELAY","dead","MoveMachineOptions","movingAction","facing","move","dashAction","dash","minusCharge","jumpUp","jumpBack","setGroundVel","changeGroundVel","stillAction","transport","guards","hasCharge","_event","charge","activities","services","delays","dashVel","dashDrag","createMoveMachine","config","options"],"mappings":"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","sourcesContent":["\nimport { Machine, MachineConfig, MachineOptions, assign, spawn, StateMachine, SpawnedActorRef, sendParent } from 'xstate';\nimport { Dir } from '../joegameTypes'\nimport 'phaser'\nimport getPath from '../utils/getPath';\nimport { IPathfinder } from '../ILevel';\nimport getDirFromTransition from '../utils/getDirFromTransition';\nimport moveDistance from '../actions/moveDistance';\nimport { ICharacterMoveMachine } from '../ICharacter';\nimport getTileFromPoint from '../utils/getTileFromPoint';\n\n/*\n * A machine character is somethig that has:\n */\nexport interface IMachineCharacter {\n    move(dir: Dir): void\n    dash(dir: Dir): void\n    transport(x: number, y: number): void\n    charge: number\n    //for calculating dash length\n    dashVel: number\n    dashDrag: number\n    minusCharge(): void\n    jumpUp(): void\n    jumpBack(dir: Dir): void\n    stop(): void\n    changeGroundVel(vel: Phaser.Types.Math.Vector2Like): void\n    name: string\n    align(): Phaser.Types.Math.Vector2Like\n    x: number\n    y: number\n    speed: number\n    player: boolean\n    auto: boolean\n    facing: Dir\n}\n\nexport interface MoveMachineContext {\n    char: IMachineCharacter\n    finder: IPathfinder\n    tileSize: number\n}\n\nexport type MoveMachineEvent =\n    | { type: \"MOVE\", dir: Dir }\n    | { type: \"DASH\", dir: Dir }\n    | { type: \"PLATFORM_CHANGE\"; vel: { x: number; y: number } }\n    | { type: \"MOVE_ON_PATH\"; point: { x: number; y: number }; tempObs?: { x: number; y: number } }\n    | { type: \"BUMP\"; dir: Dir }\n    | { type: \"LEAVE_PLATFORM\" }\n    | { type: \"DESTINATION_REACHED\" }\n    | { type: \"NO_PATH\" }\n    | { type: \"STOP\" }\n    | { type: \"TRANSPORT\"; point: { x: number; y: number } }\n\ninterface MoveMachineStateSchema {\n    states: {\n        dashing: {}\n        moving: {}\n        onPath: {}\n        still: {}\n        dead: {}\n    };\n}\n\ninterface IPathmoveMachineContext {\n    tileSize: number\n    char: IMachineCharacter & ICharacterMoveMachine\n    destTile: Phaser.Types.Math.Vector2Like\n    tempObsTile: Phaser.Types.Math.Vector2Like\n    finder: IPathfinder\n    path: Phaser.Types.Math.Vector2Like[]\n}\n\n\nconst createPathmoveMachine = (name: string) => Machine<IPathmoveMachineContext>({\n    id: `${name}s_pathmover`,\n    initial: 'gettingpath',\n    states: {\n        gettingpath: {\n            invoke: {\n                src: (context, event) => {\n                    const charPlace = context.char.align()\n                    return getPath({\n                        x: charPlace.x as number,\n                        y: charPlace.y as number,\n                        dx: context.destTile.x as number,\n                        dy: context.destTile.y as number,\n                        tempObsX: context.tempObsTile.x as number,\n                        tempObsY: context.tempObsTile.y as number,\n                        finder: context.finder\n                    })\n                },\n                onDone: {\n                    actions: assign({\n                        path: (context, event) => event.data,\n                    }),\n                    target: 'movingOnPath'\n                }\n\n            }\n        },\n        movingOnPath: {\n            invoke: {\n                src: (context) => {\n                    if (context.path.length > 0) {\n                        const direction = getDirFromTransition(context.path[0] as { x: number, y: number })\n                        return moveDistance({\n                            gobject: context.char,\n                            dir: direction,\n                            distance: context.tileSize,\n                            stop: false\n                        })\n                    } else {\n                        console.log('no path!')\n                    }\n                },\n                onDone: [\n                    {\n                        target: 'movingOnPath',\n                        actions: assign({\n                            path: (context) => {\n                                // console.log(context.path);\n                                if (context.path.length > 1) {\n                                    return context.path.slice(1)\n                                } else {\n                                    return []\n                                }\n                            }\n                        }),\n                        cond: (context) => context.path.length > 1\n                    },\n                    { target: 'reachedDestination' }\n\n                ]\n            }\n        },\n        reachedDestination: {\n            type: 'final'\n        }\n    }\n})\n\nexport const MoveMachineConfig = (\n    character: IMachineCharacter,\n    tileSize: number,\n    finder: IPathfinder,\n): MachineConfig<MoveMachineContext, MoveMachineStateSchema, MoveMachineEvent> => {\n    return {\n        key: `${character.name}_movemachine`,\n        initial: 'still',\n        entry: ['setGroundVel'],\n        context: {\n            char: character,\n            tileSize: tileSize,\n            finder: finder,\n        },\n        on: {\n            TRANSPORT: {\n                target: 'still',\n                actions: 'transport'\n            }\n        },\n        states: {\n            still: {\n                entry: ['stillAction'],\n                on: {\n                    MOVE: ['moving'],\n                    MOVE_ON_PATH: { target: \"onPath\" },\n                    DASH: [\n                        { target: 'dashing', cond: 'hasCharge' },\n                        { actions: 'noChargeAction' },\n                    ],\n                    STOP: { target: 'still', actions: 'setGroundVel' },\n                    PLATFORM_CHANGE: { target: 'still', actions: 'setGroundVel' },\n                    BUMP: { target: 'still', actions: 'jumpBack' }\n                }\n            },\n            onPath: {\n                invoke: {\n                    src: (context) => createPathmoveMachine(context.char.name),\n                    data: {\n                        tileSize: (context: MoveMachineContext) => context.tileSize,\n                        char: (context: MoveMachineContext) => context.char,\n                        destTile: (context: MoveMachineContext, event: { type: string, point: { x: number, y: number } }) => {\n                            const tile = getTileFromPoint({ x: event.point.x, y: event.point.y }, context.tileSize)\n                            return { x: tile.x, y: tile.y }\n                        },\n                        tempObsTile: (_context: MoveMachineContext, event) => event.tempObs || { x: -9999, y: -9999 },\n                        finder: (context: MoveMachineContext) => context.finder,\n                        path: []\n                    },\n                    onDone: { target: 'still', actions: sendParent('DESTINATION_REACHED') }\n                },\n                on: {\n                    DESTINATION_REACHED: 'still',\n                    BUMP: { actions: 'jumpBack', target: 'still' },\n                    MOVE_ON_PATH: { target: 'onPath' },\n                    NO_PATH: { target: 'still', actions: 'jumpUp' },\n                    MOVE: ['moving'],\n                    DASH: [\n                        { target: 'dashing', cond: 'hasCharge' },\n                        { actions: 'noChargeAction' },\n                    ],\n                }\n            },\n            moving: {\n                entry: ['setLastDir', 'movingAction'],\n                on: {\n                    MOVE: 'moving',\n                    STOP: { target: 'still', actions: 'setGroundVel' },\n                    BUMP: { actions: 'jumpBack', target: 'moving' },\n                    LEAVE_PLATFORM: { target: 'moving', actions: 'setGroundVel' },\n                    PLATFORM_CHANGE: { target: 'moving', actions: 'setGroundVel' }\n                }\n            },\n            dashing: {\n                entry: ['dashAction', 'minusCharge'],\n                on: {\n                    DASH: [\n                        { target: 'dashing', cond: 'hasCharge' },\n                        { actions: 'noChargeAction' },\n                    ],\n                },\n                after: {\n                    DASH_DELAY: { target: 'still', actions: 'setGroundVel' },\n                }\n            },\n            dead: {\n                type: 'final'\n            }\n        },\n    }\n};\n\n\nconst MoveMachineOptions = (): MachineOptions<MoveMachineContext, any> => {\n    return {\n        actions: {\n            movingAction: (context, event) => {\n                const dir = event.dir ? event.dir : context.char.facing\n                context.char.move(dir)\n            },\n            dashAction: (context, event) => context.char.dash(event.dir),\n            minusCharge: (context) => context.char.minusCharge(),\n            jumpUp: (context) => context.char.jumpUp(),\n            jumpBack: (context, event) => context.char.jumpBack(event.dir),\n            setGroundVel: (context) => { context.char.changeGroundVel({ x: 0, y: 0 }) },\n            stillAction: (context) => context.char.stop(),\n            transport: (context, event) => context.char.transport(event.point.x, event.point.y)\n        },\n        guards: {\n            hasCharge: (context, _event) => context.char.charge > 0 ? true : false,\n        },\n        activities: {\n        },\n        services: {\n        },\n        delays: {\n            DASH_DELAY: (context, event) => {\n                return (context.char.dashVel / context.char.dashDrag) * 1000\n            },\n        }\n    }\n}\n\nexport function createMoveMachine(char: IMachineCharacter, tileSize: number, finder: IPathfinder) {\n    const config = MoveMachineConfig(char, tileSize, finder);\n    const options = MoveMachineOptions();\n    return Machine(config, options)\n}\n"],"file":"MoveMachine.js"}