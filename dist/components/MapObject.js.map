{"version":3,"sources":["../../src/components/MapObject.ts"],"names":["MapObject","scene","tilemap","x","y","t_obj","props","name","toString","id","tiledWidth","width","tiledHeight","height","properties","prop","setData","value","gid","undefined","textures","exists","setTexture","found","tilesets","find","tset","ind","tsets","firstgid","setFlipX","flippedHorizontal","setFlipY","flippedVertical","setDepth","depth","setRotation","Phaser","Math","DegToRad","rotation","setOrigin","setDisplaySize","setSize","getData","bodytype","Physics","Arcade","DYNAMIC_BODY","STATIC_BODY","physics","world","enableBody","sf","setScrollFactor","setVisible","visible","events","addListener","playAnim","stopAnim","anim_","anims","play","stop","GameObjects","Sprite"],"mappings":"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","sourcesContent":["import 'phaser';\nimport {IMap} from '../ILevel'\n\nexport interface ITiledMapObject extends Phaser.Types.Tilemaps.TiledObject {\n    depth: number\n}\n\nexport interface IMapObject {\n    name: string\n    id: number\n    tiledWidth: number\n    tiledHeight: number\n    props: object\n    playAnim(): void\n    stopAnim(): void\n    x: number\n    y: number\n}\n\nexport class MapObject extends Phaser.GameObjects.Sprite implements IMapObject {\n    name: string\n    id: number\n    tiledWidth: number\n    tiledHeight: number\n    props: object\n\n    constructor(scene: Phaser.Scene, tilemap: IMap,x: number, y: number, t_obj: ITiledMapObject  ) {\n        super(scene, x, y, '');\n        // this.setPipeline(joegameData.globalPipeline);\n        this.props = {};\n        this.name = t_obj.name || `${this.x.toString()}+${this.x.toString()}`;\n        this.id = t_obj.id;\n        this.tiledWidth = t_obj.width || 2\n        this.tiledHeight = t_obj.height || 2\n        if(!t_obj.properties){\n            // console.log(`SCENEMAP/TILEDOBJECTS: ${this.name} does not have ANY defined properties, btw`)\n        } else {\n            for (let prop of t_obj.properties){\n                this.setData(prop.name, prop.value)\n            }\n        }\n        if (t_obj.gid != undefined){\n            if (this.scene.textures.exists(t_obj.gid.toString())){\n                this.setTexture(t_obj.gid.toString());\n            } else {\n                //if there is a gid but not a texture itself, its in one of the tilesheets/spritemaps\n                const found=tilemap.tilesets.find((tset,ind,tsets)=>{\n                    // is the gid in question equal to or over this sets first gid? Ok, is it beneath the next one, or already on the last one?\n                    return t_obj.gid! >= tset.firstgid && tsets[ind+1] ? t_obj.gid!<tsets[ind+1]?.firstgid : true\n                });\n                if (found) {\n                    this.setTexture(found.name, t_obj.gid - found.firstgid)\n                }\n            }\n        }\n\n        this.setFlipX(t_obj.flippedHorizontal || false)\n        this.setFlipY(t_obj.flippedVertical || false)\n        this.setDepth(t_obj.depth)\n        this.setRotation(Phaser.Math.DegToRad(t_obj.rotation || 0))\n        this.setOrigin(0,1);\n        this.setDisplaySize(this.tiledWidth,this.tiledHeight);\n        this.setSize(this.tiledWidth,this.tiledHeight);\n        if(this.getData('body') || false) {\n            const bodytype = this.getData('moveable') ? Phaser.Physics.Arcade.DYNAMIC_BODY : Phaser.Physics.Arcade.STATIC_BODY\n            this.scene.physics.world.enableBody(this,bodytype)\n            // scenemap.objbody.add(this)\n        }\n        if(this.getData('scrollFactor') || false) {\n            const sf = this.getData('scrollFactor')\n            this.setScrollFactor(sf)\n            // scenemap.objbody.add(this)\n        }\n        // this.setSize(this.width,this.height);\n        this.setVisible(t_obj.visible || true);\n        // console.log(`${this.name} is being created!`);\n        this.scene.events.addListener(`play_anim_${t_obj.name}`,()=>{this.playAnim()});\n        this.scene.events.addListener(`stop_anim_${t_obj.name}`,()=>{this.stopAnim()});\n        this.scene.events.addListener(this.getData('animHook') || '',()=>{this.playAnim()});\n\n    }\n\n    playAnim(){\n        const anim_ =this.getData('anim');\n        if(anim_){\n            this.anims.play(anim_);\n            this.setDisplaySize(this.width, this.height)\n        } else {\n            \"No anim set on the ${this.name} tiled object (or elsewhere!)\"\n        }\n    }\n    stopAnim(){\n        this.anims.stop();\n    }\n}\n"],"file":"MapObject.js"}