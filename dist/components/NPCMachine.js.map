{"version":3,"sources":["../../src/components/NPCMachine.ts"],"names":["machineConfig","name","id","initial","entry","on","AUTO_OFF","actions","auto","context","target","AUTO_ON","states","going","DESTINATION_REACHED","SPEAK_THOUGHT","console","log","BUMP","stoppedAndTurned","after","TALK_TO","idle","MOVE_THOUGHT","cond","conversing","CONVERSATION_DONE","opts","chooseInterest","interestCounter","interests","length","currentDestination","curr","x","y","setInterest","_context","event","tmpFinalFacing","finalFacing","undefined","unsetFinalFacing","startDialogue","reactToCollider","additionalAvoid","sprite","tileSize","jumpBack","collider","character","type","dir","Dir","south","north","west","east","to","moveMachineRef","exclaim","announceReached","moveToInterest","point","tempObs","spawnMoveMachine","finder","guards","isAuto","activities","services","delays","createNPCMachine","char","withContext","patience","defaults"],"mappings":"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","sourcesContent":["import { Machine, assign, sendParent, send, MachineConfig, MachineOptions, SpawnedActorRef, spawn, StateMachine } from 'xstate'\nimport { Dir } from '../joegameTypes'\nimport { MoveMachineEvent, createMoveMachine, IMachineCharacter } from './MoveMachine'\nimport { IPathfinder } from '../ILevel'\nimport defaults from '../defaults'\nimport getTileFromBody from '../utils/getTileFromBody'\n// - Machine\n// - interpret\n// - assign\n// - send\n// - sendParent\n// - spawn\n// - raise\n// - actions\n// - XState (all XState exports)\n\n\n\n\nexport interface NPCContext {\n    currentDestination: {\n        x: number\n        y: number\n        finalFacing?: Dir\n    }\n    patience: number\n    additionalAvoid: {\n        x: number\n        y: number\n    }\n    interestCounter: number\n    interests: Array<{\n        x: number\n        y: number\n        finalFacing?: Dir\n    }>\n    auto: boolean\n    tmpFinalFacing: string | undefined\n    moveMachineRef?: SpawnedActorRef<MoveMachineEvent>\n    character: IMachineCharacter\n    tileSize: number\n    finder: IPathfinder\n}\n\ninterface IBumper {\n    name: string\n    body: Phaser.Physics.Arcade.Body\n}\n\nexport interface locationDirection {\n    x: number\n    y: number\n    finalFacing: Dir\n}\n\nexport type NPCEvent =\n    | { type: 'AUTO_OFF' }\n    | { type: 'AUTO_ON' }\n    | { type: 'BUMP'; sprite: IBumper }\n    | { type: 'DESTINATION_REACHED' }\n    | { type: 'TALK_TO' }\n    | { type: 'MOVE_THOUGHT'; x: number; y: number; finalFacing?: string }\n    | { type: 'SPEAK_THOUGHT' }\n    | { type: 'NO_PATH' }\n    | { type: 'WALL_BUMP' }\n    | { type: 'CONVERSATION_DONE' }\n\n\n\nconst machineConfig = (name: string): MachineConfig<NPCContext, any, NPCEvent> => {\n    return {\n\n        id: 'NPCMachine' + name,\n        initial: 'idle',\n        entry: 'spawnMoveMachine',\n        on: {\n            // AUTO_OFF:{actions: assign({auto: ()=>false})},\n            AUTO_OFF: {\n                actions: assign({ auto: (context) => { return false } }),\n                target: \"idle\"\n            },\n            AUTO_ON: {\n                actions: assign({ auto: (context) => { return true } }),\n                target: \"idle\"\n            }\n        },\n        states: {\n            going: {\n                on: {\n                    DESTINATION_REACHED: {\n                        target: 'idle',\n                        actions: ['unsetFinalFacing', 'announceReached']\n                    },\n                    SPEAK_THOUGHT: {\n                        actions: () => { console.log('you say something') }\n                    },\n                    BUMP: {\n                        target: 'stoppedAndTurned',\n                    },\n                },\n                entry: ['moveToInterest']\n            },\n            stoppedAndTurned: {\n                entry: ['reactToCollider', 'exclaim', 'jumpBack'],\n                after: {\n                    2000: [{ target: 'going' }]\n                },\n                on: {\n                    TALK_TO: {\n                        target: 'conversing',\n                        actions: 'startDialogue'\n                    }\n                }\n            },\n            idle: {\n                on: {\n                    MOVE_THOUGHT: {\n                        target: 'going',\n                        actions: ['setInterest']\n                    },\n                    SPEAK_THOUGHT: {\n                        actions: () => { console.log('you say something') }\n                    },\n                    BUMP: {\n                        target: 'stoppedAndTurned',\n                    },\n                },\n                after: {\n                    2000: {\n                        target: 'going',\n                        cond: 'isAuto',\n                        actions: ['chooseInterest']\n                    }\n                }\n            },\n            conversing: {\n                on: {\n                    CONVERSATION_DONE: 'idle'\n                }\n            }\n\n        }\n    }\n}\n\n// export default Machine(machineConfig,machineOptions)\n\nconst opts: MachineOptions<NPCContext, any> = {\n    actions: {\n\n        chooseInterest: assign({\n            interestCounter: (context) => { return (context.interestCounter + 1) % context.interests.length },\n            currentDestination: (context) => {\n                const curr = context.interests[context.interestCounter]\n                return { x: curr.x, y: curr.y }\n            }\n        }),\n        setInterest: assign<any, Extract<{ type: 'MOVE_THOUGHT', x: number, y: number, finalFacing: string }, NPCEvent>>({\n            currentDestination: (_context, event) => { return { x: event.x, y: event.y } },\n            tmpFinalFacing: (_context, event) => { if (event.finalFacing != undefined) { return event.finalFacing } else { return undefined } }\n        }),\n        unsetFinalFacing: assign<NPCContext, any>({ tmpFinalFacing: (_context) => undefined }),\n        startDialogue: (_context) => { },\n        reactToCollider: assign<any, any>({\n            additionalAvoid: (context, event) => getTileFromBody(event.sprite, context.tileSize)\n        }),\n        jumpBack: send((context, event) => {\n            const collider = event.sprite\n            console.log(event)\n            if (collider.y > context.character.y) {\n                return { type: 'BUMP', dir: Dir.south }\n            } else if (collider.y < context.character.y) {\n                return { type: 'BUMP', dir: Dir.north }\n            } else if (collider.x < context.character.x) {\n                return { type: 'BUMP', dir: Dir.west }\n            } else if (collider.x > context.character.x) {\n                return { type: 'BUMP', dir: Dir.east }\n            } else {\n                return { type: 'BUMP', dir: Dir.east }\n            }\n        }, {\n            to: (context) => context.moveMachineRef as SpawnedActorRef<MoveMachineEvent>\n        }),\n        exclaim: (_context) => { },\n        announceReached: (_context) => { },\n        moveToInterest: send(\n            (context) => {\n                return {\n                    type: 'MOVE_ON_PATH',\n                    point: { x: context.currentDestination.x, y: context.currentDestination.y },\n                    tempObs: { x: context.additionalAvoid.x, y: context.additionalAvoid.y }\n                }\n            },\n            { to: (context) => context.moveMachineRef as SpawnedActorRef<MoveMachineEvent> }\n        ),\n        spawnMoveMachine: assign({\n            moveMachineRef: (context) => {\n                return spawn(createMoveMachine(context.character, context.tileSize, context.finder))\n            }\n        }),\n        // duration:2000,\n    },\n    guards: {\n        isAuto: (context) => context.auto\n    },\n    activities: {\n    },\n    services: {},\n    delays: {}\n}\nexport function createNPCMachine(char: IMachineCharacter,\n    tileSize: number,\n    finder: IPathfinder,\n    interests: Array<{ x: number, y: number, finalFacing?: Dir }>\n): StateMachine<NPCContext, any, NPCEvent> {\n    return Machine<NPCContext, NPCEvent>(machineConfig(char.name), opts).withContext({\n        character: char,\n        tileSize: tileSize,\n        finder: finder,\n        interests: interests,\n        currentDestination: interests[1],\n        patience: defaults.patience,\n        auto: true,\n        tmpFinalFacing: undefined,\n        interestCounter: 0,\n        additionalAvoid: { x: 0, y: 0 }\n    })\n}\n"],"file":"NPCMachine.js"}