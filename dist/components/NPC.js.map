{"version":3,"sources":["../../src/components/NPC.ts"],"names":["NPC","scene","x","y","config","interests","currInterest","patience","speed","mach","NPCMachine","withContext","char","interestCounter","additionalAvoid","auto","machine","label","text","name","npcGroup","add","npcs","set","speechbox","SpeechBox","body","setImmovable","game","events","once","initColliders","start","console","log","stop","time","addEvent","callback","length","send","location","finalFacing","Dir","north","delay","Character"],"mappings":"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","sourcesContent":["import 'phaser';\nimport { Character, CharacterConfig } from './Character';\nimport { Machine, interpret, Interpreter} from 'xstate';\nimport NPCMachine from './NPCMachine';\nimport { machineOptions } from './NPCMachineOptions';\nimport { CharMoveAnims, CharStates, Dir } from './joegameData';\nimport Player from './Player';\nimport { nameList } from './random-name-list'\nimport SpeechBox from './SpeechBox';\ntype Vec2 = Phaser.Types.Math.Vector2Like;\n\nexport default class NPC extends Character {\n    machine: Interpreter<any>;\n    interests: Array<{x: number; y: number; finalFacing?: Dir}>\n    currInterest: number;\n    patience: number;\n    name: string;\n    speechbox: SpeechBox;\n    auto: boolean;\n\n\n    constructor(scene: Phaser.Scene, x = 0, y = 0, config: CharacterConfig, interests: Array<{x: number; y: number; finalFacing?: Dir} | Phaser.Tilemaps.Tile>) {\n        super( scene, x, y, config);\n        this.interests = interests;\n        this.currInterest = 0;\n        // const machOpts = machineOptions(this);\n        this.patience = 1000;\n        this.speed = 12;\n        const mach = NPCMachine.withContext({\n            char: this,\n            interestCounter: 1,\n            additionalAvoid: {x: 1, y: 1},\n            auto: true,\n            patience: 2000,\n            interests: interests\n        })\n        this.machine = interpret(mach)\n        this.auto = true;\n        // this.setOrigin(0.5,0.85);\n        // let thisName: string;\n        // if (name){\n        //     thisName = name;\n        //     this.name = name;\n        // } else {\n        //     thisName = nameList[Math.floor(nameList.length * Math.random())]\n        //     this.name = thisName;\n        // }\n        this.label.text = this.name;\n\n        this.scene.npcGroup.add(this,true);\n        this.scene.npcs.set(this.name,this);\n\n        this.speechbox = new SpeechBox(this.scene, this);\n        this.add(this.speechbox)\n\n        //TODO this will be changed to pushable on change to stable 3.50\n        this.body.setImmovable(true)\n        // this.body.setPushable(false)\n\n        this.scene.game.events.once('levelloaded',()=>{\n            this.initColliders();\n            this.machine.start();\n        })\n        this.scene.events.once('levelclosed',()=>{\n            // this.initColliders();\n            // this.machine.start();\n            console.log(\"this should stop machine\")\n            this.machine.stop()\n        })\n        // this.scene.events.once(Phaser.Core.Events.DESTROY,()=>{\n        //     this.machine.stop()\n        // })\n        // this.scene.events.once(Phaser.Scenes.Events.DESTROY,()=>{\n        //     console.log(\"this should be stopping NPC machines!\")\n        //     this.machine.stop()\n        // })\n        // this.scene.events.once(Phaser.Scenes.Events.PAUSE,()=>{\n        //     this.machine.stop()\n        // })\n    }\n\n    idlingAction(){\n        if (this.auto) {\n            this.scene.time.addEvent({\n                callback: ()=>{\n                    this.currInterest = (this.currInterest + 1) % this.interests.length;\n                    this.machine.send('MOVE_THOUGHT',{location:{\n                        x: this.interests[this.currInterest].x,\n                        y: this.interests[this.currInterest].y,\n                        finalFacing: Dir.north}})\n                },\n                delay: this.patience\n            });\n        }\n    }\n\n    initColliders(){\n        // TODO breaks switching level\n        // this.scene.physics.add.collider(this, this.scene.map.mainLayer, (npc,wall)=>{\n        //     this.machine.send('WALL_BUMP');\n        //     // console.log('WALL_BUMP');\n        // });\n        // // with the player\n        // this.scene.physics.add.collider(this,this.scene.player,(npc: NPC, player: Player)=>{\n        //     // console.log('PLAYER_BUMP');\n        //     // console.log(npc);\n        //     // player.stopMove();\n        //     npc.machine.send({type:'BUMP', sprite: player})\n        // });\n        // // with each other\n        // this.scene.physics.add.collider(this,this.scene.npcGroup,(npc: NPC, npc_: NPC)=>{\n        //     npc_.machine.send({type:'BUMP', sprite: npc})\n        //     npc.machine.send({type:'BUMP', sprite: npc_})\n        // });\n    }\n}\n"],"file":"NPC.js"}