{"version":3,"sources":["../../src/components/MachineRegistry.ts"],"names":["MachineRegistry","machines","Map","char","mach","set","forEach","start","stop","event","charm","get","undefined","send","console","log","status","InterpreterStatus","NotStarted"],"mappings":";;;;;;;;;;;;;AAEA;;IAkBaA,e;AAET,6BAAc;AAAA;AACV,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACH;;;;WACD,aAAIC,IAAJ,EAAkBC,IAAlB,EAAwC;AACpC,WAAKH,QAAL,CAAcI,GAAd,CAAkBF,IAAlB,EAAwBC,IAAxB;AACH;;;WACD,oBAAiB;AACb,WAAKH,QAAL,CAAcK,OAAd,CAAsB,UAACF,IAAD;AAAA,eAAQA,IAAI,CAACG,KAAL,EAAR;AAAA,OAAtB;AACH;;;WACD,mBAAgB;AACZ,WAAKN,QAAL,CAAcK,OAAd,CAAsB,UAACF,IAAD;AAAA,eAAQA,IAAI,CAACI,IAAL,EAAR;AAAA,OAAtB;AACH;;;WACD,gBAAOL,IAAP,EAAqBM,KAArB,EAAuC;AACnC,UAAMC,KAAK,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBR,IAAlB,CAAd;;AACA,UAAGO,KAAK,IAAEE,SAAV,EAAoB;AAChBF,QAAAA,KAAK,CAACG,IAAN,CAAWJ,KAAX;AACH,OAFD,MAEO;AACHK,QAAAA,OAAO,CAACC,GAAR,wBAA4BZ,IAA5B;AACH;AACJ;;;WACD,qBAAYC,IAAZ,EAA6C;AAAA;;AACzC,aAAO,4BAAKH,QAAL,CAAcU,GAAd,CAAkBP,IAAlB,2EAAyBY,MAAzB,KAAmCC,0BAAkBC,UAA5D;AACH","sourcesContent":["import { NPCEvent } from './NPCMachine'\nimport { MoveMachineEvent } from './MoveMachine'\nimport {Interpreter, InterpreterStatus} from 'xstate'\n\nexport interface IMachine {\n    send(event: any): any\n    start(): void\n    stop(): void\n    onTransition(func: Function): void\n    status: InterpreterStatus\n}\nexport interface IMachineRegistry {\n    machines: Map<string, IMachine>\n    startAll(): void\n    stopAll(): void\n    sendTo(char: string, event: any): void\n    checkStatus(mach: string): InterpreterStatus\n    add(char: string, mach: IMachine): void\n}\n\nexport class MachineRegistry implements IMachineRegistry {\n    machines: Map<string, IMachine>\n    constructor() {\n        this.machines = new Map<string, IMachine>()\n    }\n    add(char: string, mach: IMachine): void {\n        this.machines.set(char, mach)\n    }\n    startAll(): void {\n        this.machines.forEach((mach)=>mach.start())\n    }\n    stopAll(): void {\n        this.machines.forEach((mach)=>mach.stop())\n    }\n    sendTo(char: string, event: any): void {\n        const charm = this.machines.get(char)\n        if(charm!=undefined){\n            charm.send(event)\n        } else {\n            console.log(`There is not ${char} machine in the registry`)\n        }\n    }\n    checkStatus(mach: string): InterpreterStatus {\n        return this.machines.get(mach)?.status || InterpreterStatus.NotStarted\n    }\n}\n"],"file":"MachineRegistry.js"}