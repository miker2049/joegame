{"version":3,"sources":["../../src/components/VoxBox.ts"],"names":["BOXALPHA","VoxBox","level","owner","scene","fontSize","wordWrap","width","map","tileWidth","padding","x","y","fixedWidth","fixedHeight","setWordWrapCallback","str","wrapped","basicWordWrap","context","splitt","split","slice","textbuff","setAlpha","setBackgroundColor","setOrigin","setScale","cameras","default","zoom","speed","closeEvent","destroy","setMDText","open","timeID","Math","random","toString","time","addEvent","delay","callback","close","Promise","res","rej","tweens","add","targets","alpha","duration","onComplete","text","updateVoxtext","setText","updateText","Phaser","GameObjects","Text"],"mappings":"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","sourcesContent":["import 'phaser'\nimport { typewriteText } from '../utils/typewriteText';\nimport { ILevelComponents } from '../ILevel'\nimport { ITextBox } from './TextWindow'\n\nconst BOXALPHA = 0.7\nexport default class VoxBox extends Phaser.GameObjects.Text implements ITextBox {\n    textbuff: string\n    owner: 'noowner' | Phaser.GameObjects.GameObject = 'noowner'\n    closeEvent: { destroy(): void } | undefined\n\n    constructor(level: ILevelComponents, owner?: 'noowner' | Phaser.GameObjects.GameObject) {\n        super(level.scene, 0, 4, '', {\n            // fontFamily: 'Retro Gaming',\n            fontSize: '12px',\n            wordWrap: {\n                width: level.map.tileWidth * 7,\n\n            },\n            padding: { x: 2, y: 2 },\n            fixedWidth: level.map.tileWidth * 7,\n            fixedHeight: level.map.tileWidth * 3.5,\n        });\n        if (owner) this.owner = owner\n        this.setWordWrapCallback((str) => {\n            const wrapped = this.basicWordWrap(str, this.context, level.map.tileWidth * 7)\n            let splitt = wrapped.split('\\n')\n            return splitt.slice(-5)\n        })\n        this.textbuff = ''\n        this.setAlpha(BOXALPHA)\n        this.setBackgroundColor('black')\n        this.setOrigin(0.5, 1)\n        this.setScale(1 / (level.scene.cameras.default.zoom * 2))\n        // this.setMaxLines\n    }\n\n    async speak(str: string, speed?: number) {\n        if (this.closeEvent) this.closeEvent.destroy()\n        this.setMDText('')\n        await this.open()\n        const timeID = Math.random().toString()\n        await typewriteText(str, this, this.scene, speed)\n        // this.setText(str)\n        this.closeEvent = this.scene.time.addEvent({\n            delay: 1500,\n            callback: () => {\n\n                this.close()\n            }\n        })\n    }\n\n    open() {\n        return new Promise<void>((res, rej) => {\n            this.scene.tweens.add({\n                targets: [this],\n                alpha: BOXALPHA,\n                duration: 500,\n                onComplete: () => res()\n            })\n        })\n    }\n\n    close() {\n        this.scene.tweens.add({\n            targets: [this],\n            alpha: 0,\n            duration: 500\n        })\n    }\n\n    //TODO stop lying about this\n    setMDText(text: string) {\n        this.textbuff = text\n        this.updateVoxtext()\n    }\n\n    appendMDText(text: string) {\n        this.textbuff += text\n        this.updateVoxtext()\n    }\n\n    appendNewLineMDText(text: string) {\n        this.textbuff += \"\\n\\n\" + text\n        this.updateVoxtext()\n    }\n\n    updateVoxtext() {\n        this.setText(this.textbuff)\n        this.updateText()\n    }\n}\n"],"file":"VoxBox.js"}