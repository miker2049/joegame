{"version":3,"sources":["../../src/components/InfiniteMap.ts"],"names":["MapObjectWatcher","obj","limit","tileSize","mapTWidth","mapTHeight","dir","Dir","north","y","south","east","x","west","Math","round","height","width","console","log","watchNorth","watchWest","shift","watchEast","watchSouth","InfiniteMap","params","tilemap","camera","scene","cameras","main","tileOffsetX","tileOffsetY","mapTileWidth","mapTileHeight","tileWidth","objWatchers","mapObjects","map","mo","cameraCenter","midPoint","on","cam","gob","newmid","shiftNorth","forEach","w","check","shiftSouth","shiftEast","shiftWest","tileHeight","tilesets","layer","getObjectLayer","getLayer","nonNull","getTileAt","layers","l","tilemapLayer","copy"],"mappings":"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","sourcesContent":["import 'phaser'\nimport { Axis, Dir } from '../joegameTypes'\nimport { getMapKeyNameRaw } from '../utils/getKeyNames'\nimport createTilemap from'../factories/createTilemap'\nimport TiledRawJson from'../../typings/TiledRawJson'\nimport { IMap } from '../ILevel'\nimport getTileFromPoint from '../utils/getTileFromPoint'\n\n\n\ninterface IInfiniteMapParams {\n    scene: Phaser.Scene\n    tilemap: Phaser.Tilemaps.Tilemap\n    mapObjects: Phaser.GameObjects.Image[]\n}\n\ninterface IInfiniteMap {\n    shiftNorth(): void\n    shiftSouth(): void\n    shiftEast(): void\n    shiftWest(): void\n}\n\ninterface IMapObjectWatcher {\n    watchNorth: number\n    watchSouth: number\n    watchEast: number\n    watchWest: number\n    obj: Phaser.GameObjects.Image\n    shift(dir: Dir): void\n    check(x: number, y: number): void\n}\n\nexport class MapObjectWatcher implements IMapObjectWatcher {\n    obj: Phaser.GameObjects.Image\n    tileSize: number\n    mapTWidth: number\n    mapTHeight: number\n    limit: number\n\n    constructor(obj: Phaser.GameObjects.Image, limit: number, tileSize: number, mapTWidth: number, mapTHeight: number){\n        this.obj = obj\n        this.tileSize = tileSize\n        this.mapTWidth = mapTWidth\n        this.mapTHeight = mapTHeight\n        //in tile units\n        this.limit = limit\n\n        //these are in tile units\n        // this.watchNorth = Math.round((this.obj.y - (this.mapTHeight*this.tileSize))/this.tileSize)+limit\n        // this.watchSouth = Math.round(((this.obj.y+this.obj.height) + (this.mapTHeight*this.tileSize))/this.tileSize)-limit\n        // this.watchEast = Math.round((this.obj.x + (this.mapTWidth*this.tileSize))/this.tileSize)-limit\n        // this.watchWest = Math.round(((this.obj.x+this.obj.width) - (this.mapTWidth*this.tileSize))/this.tileSize)+limit\n\n    }\n    shift(dir: Dir): void {\n        switch(dir){\n            case Dir.north: {\n                this.obj.y -= this.mapTHeight * this.tileSize\n                // this.watchNorth = (this.obj.y + this.limit)/this.tileSize\n                break\n            }\n            case Dir.south: {\n                this.obj.y += this.mapTHeight * this.tileSize\n                // this.watchNorth = (this.obj.y + this.limit)/this.tileSize\n                break\n            }\n            case Dir.east: {\n                this.obj.x += this.mapTWidth * this.tileSize\n                // this.watchNorth = (this.obj.y + this.limit)/this.tileSize\n                break\n            }\n            case Dir.west: {\n                this.obj.x -= this.mapTWidth * this.tileSize\n                // this.watchNorth = (this.obj.y + this.limit)/this.tileSize\n                break\n            }\n        }\n    }\n\n    get watchNorth(): number {\n        return Math.round((this.obj.y - (this.mapTHeight*this.tileSize))/this.tileSize)+this.limit\n    }\n    get watchSouth(): number {\n        return Math.round(((this.obj.y+this.obj.height) + (this.mapTHeight*this.tileSize))/this.tileSize)-this.limit\n    }\n    get watchEast(): number {\n        return Math.round((this.obj.x + (this.mapTWidth*this.tileSize))/this.tileSize)-this.limit\n    }\n    get watchWest(): number {\n        return Math.round(((this.obj.x+this.obj.width) - (this.mapTWidth*this.tileSize))/this.tileSize)+this.limit\n    }\n\n    check(x: number, y: number): void {\n        console.log('y',y,'this.watchNorth',this.watchNorth)\n        if(x<=this.watchWest){\n            this.shift(Dir.west)\n        } else if (x>=this.watchEast){\n            this.shift(Dir.east)\n        }else if (y<=this.watchNorth){\n            this.shift(Dir.north)\n        }else if (y>=this.watchSouth){\n            this.shift(Dir.south)\n        }\n    }\n}\n\nexport class InfiniteMap implements IMap, IInfiniteMap {\n    tilemap: Phaser.Tilemaps.Tilemap\n    cameraCenter: Phaser.Types.Math.Vector2Like\n    tileOffsetX: number\n    tileOffsetY: number\n    tileSize: number\n    mapTileWidth: number\n    mapTileHeight: number\n    objWatchers: IMapObjectWatcher[]\n\n    constructor(params: IInfiniteMapParams){\n        this.tilemap = params.tilemap\n        const camera = params.scene.cameras.main\n        this.tileOffsetX = 0\n        this.tileOffsetY = 0\n\n        // let raw=this.params.scene.cache.json.get(getMapKeyNameRaw(this.params.tilemapPath)) as TiledRawJson\n        this.mapTileWidth = this.tilemap.width\n        this.mapTileHeight = this.tilemap.height\n        this.tileSize = this.tilemap.tileWidth\n\n\n        this.objWatchers = params.mapObjects.map((mo)=>new MapObjectWatcher(mo, 4, this.tileSize, this.tilemap.width, this.tilemap.height))\n        this.cameraCenter = getTileFromPoint(camera.midPoint,this.tilemap.tileWidth)\n\n        camera.on('followupdate',(cam,gob)=>{\n            const newmid =  getTileFromPoint(camera.midPoint,this.tilemap.tileWidth)\n            if (typeof this.cameraCenter.x === 'number' &&\n                typeof this.cameraCenter.y === 'number' &&\n                typeof newmid.x === 'number' &&\n                typeof newmid.y === 'number' ) {\n                if ( newmid.y < this.cameraCenter.y ){\n                    this.cameraCenter.y = newmid.y\n                    this.shiftNorth()\n                    this.objWatchers.forEach((w)=>w.check(newmid.x, newmid.y))\n                } else if ( newmid.y > this.cameraCenter.y){\n                    this.cameraCenter.y = newmid.y\n                    this.shiftSouth()\n                    this.objWatchers.forEach((w)=>w.check(newmid.x, newmid.y))\n                } else if ( newmid.x > this.cameraCenter.x ){\n                    this.cameraCenter.x = newmid.y\n                    this.shiftEast()\n                    this.objWatchers.forEach((w)=>w.check(newmid.x, newmid.y))\n                } else if ( newmid.x < this.cameraCenter.x ){\n                    this.cameraCenter.x = newmid.x\n                    this.shiftWest()\n                    this.objWatchers.forEach((w)=>w.check(newmid.x, newmid.y))\n                }\n            }\n        })\n    }\n\n    get tileWidth(): number {\n        return this.tilemap.tileWidth\n    }\n\n    get tileHeight(): number {\n        return this.tilemap.tileHeight\n    }\n\n    get height(): number {\n        return this.tilemap.height\n    }\n\n    get width(): number {\n        return this.tilemap.width\n    }\n\n    get tilesets(): Phaser.Tilemaps.Tileset[] {\n        return this.tilemap.tilesets\n    }\n\n    getObjectLayer(layer: string): Phaser.Tilemaps.ObjectLayer {\n        return this.tilemap.getObjectLayer(layer)\n    }\n\n    getLayer(layer: string): Phaser.Tilemaps.LayerData {\n        return this.tilemap.getLayer(layer)\n    }\n\n    getTileAt(x: number, y: number, nonNull: boolean, layer: string): {index: number, properties?: {collides?: boolean}} {\n        return this.tilemap.getTileAt(x,y,nonNull,layer)\n    }\n\n    shiftNorth(): void {\n        this.tilemap.layers.forEach((l)=>{\n            console.log(this.mapTileHeight-1)\n            l.tilemapLayer.copy(0,this.mapTileHeight-1,this.mapTileWidth,1,0,0)\n        })\n    }\n    shiftSouth(): void {}\n    shiftEast(): void {}\n    shiftWest(): void {}\n\n}\n"],"file":"InfiniteMap.js"}