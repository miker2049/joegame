{"version":3,"sources":["../../src/utils/parseWikiData.ts"],"names":["wikientries","createTmpData","spritesheet","Map","character","image","platform","mapobject","convoManifest","parseCSVRowsToWikiData","raw","parsed","dynamicTyping","tmpdata","data","forEach","row","set","key","url","animLength","undefined","frameConfig","frameWidth","frameHeight","margin","spacing","name","texture","anims","north","south","east","west","speed","dashDistance","scale","body","offsetX","offsetY","width","height","charGroups","groundTiles","split","map","i","Number","parseInt","edgeTiles","req_spritesheet","req_image","parsewikidata","rawwikidata","page","item","type"],"mappings":"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","sourcesContent":["import { CharMoveAnims } from '../joegameTypes'\nimport { parse as csvParse } from 'papaparse'\nimport { characterCSVRow, gamedataCSVRow, imageCSVRow, mapobjectCSVRow, platformCSVRow, spritesheetCSVRow, convoManifestCSVRow } from './gameDataCSVTypes'\n\nenum wikientries {\n    character,\n    spritesheet,\n    image,\n    platform,\n    mapobject,\n    convoManifest\n}\n\nexport interface wikiCharacterEntry {\n    name: string\n    texture: string\n    anims: CharMoveAnims\n    charGroups: string[]\n    speed?: number\n    dashDistance?: number\n    scale?: number\n    body?: {\n        offsetY?: number\n        offsetX?: number\n        width?: number\n        height?: number\n    }\n}\nexport interface wikiImageEntry {\n    key: string\n    url: string\n}\nexport interface wikiPlatformEntry {\n    name: string\n    texture: string\n    groundTiles: number[]\n    edgeTiles: number[]\n}\nexport interface wikiMapobjectEntry {\n    name: string\n    req_spritesheet: string[]\n    req_image: string[]\n}\nexport interface wikiSpritesheetEntry {\n    key: string\n    url: string\n    animLength?: number\n    frameConfig: {\n        frameWidth: number\n        frameHeight: number\n        margin?: number\n        spacing?: number\n    }\n}\ntype wikiEntryTypes =\n    | \"spritesheet\"\n    | \"image\"\n    | \"character\"\n    | \"platform\"\n    | \"globals\"\n    | \"mapobject\"\n\nexport interface IWikiData {\n    spritesheet: Map<string, wikiSpritesheetEntry>\n    character: Map<string, wikiCharacterEntry>\n    image: Map<string, wikiImageEntry>\n    platform: Map<string, wikiPlatformEntry>\n    mapobject: Map<string, wikiMapobjectEntry>\n    convoManifest: string\n}\n\nconst createTmpData = (): IWikiData => {\n    return {\n        spritesheet: new Map<string, wikiSpritesheetEntry>(),\n        character: new Map<string, wikiCharacterEntry>(),\n        image: new Map<string, wikiImageEntry>(),\n        platform: new Map<string, wikiPlatformEntry>(),\n        mapobject: new Map<string, wikiMapobjectEntry>(),\n        convoManifest: ''\n    }\n}\nexport function parseCSVRowsToWikiData(raw: string): IWikiData {\n    let parsed = csvParse<gamedataCSVRow>(raw, { dynamicTyping: true })\n    let tmpdata = createTmpData()\n    parsed.data.forEach((row) => {\n        if (row[0] !== -1) {\n            switch (row[1]) {\n                case 'spritesheet': {\n                    row = row as spritesheetCSVRow\n                    tmpdata.spritesheet.set(row[2], {\n                        key: row[2],\n                        url: row[3],\n                        animLength: row[4] != null ? row[4] as number : undefined,\n                        frameConfig: {\n                            frameWidth: row[5],\n                            frameHeight: row[6],\n                            margin: row[7],\n                            spacing: row[8],\n                        }\n                    })\n                    break\n                }\n                case 'image': {\n                    row = row as imageCSVRow\n                    tmpdata.image.set(row[2], {\n                        key: row[2],\n                        url: row[3],\n                    })\n                    break\n                }\n                case 'character': {\n                    row = row as characterCSVRow\n                    tmpdata.character.set(row[2], {\n                        name: row[2],\n                        texture: row[3],\n                        anims: {\n                            north: row[4],\n                            south: row[5],\n                            east: row[6],\n                            west: row[7],\n                        },\n                        speed: row[8],\n                        dashDistance: row[9],\n                        scale: row[10],\n                        body: {\n                            offsetX: row[11],\n                            offsetY: row[12],\n                            width: row[13],\n                            height: row[14]\n                        },\n                        charGroups: [row[15], row[16]]\n                    })\n                    break\n                }\n                case 'platform': {\n                    row = row as platformCSVRow\n                    tmpdata.platform.set(row[2], {\n                        name: row[2],\n                        texture: row[3],\n                        groundTiles: `${row[4]}`.split(';').map(i => Number.parseInt(i)),\n                        edgeTiles: `${row[5]}`.split(';').map(i => Number.parseInt(i))\n                    })\n                    break\n                }\n                case 'mapobject': {\n                    row = row as mapobjectCSVRow\n                    tmpdata.mapobject.set(row[2], {\n                        name: row[2],\n                        req_spritesheet: `${row[3]}`.split(';'),\n                        req_image: `${row[4]}`.split(';')\n                    })\n                    break\n                }\n                case 'convoManifest': {\n                    row = row as convoManifestCSVRow\n                    tmpdata.convoManifest = row[2]\n                    break\n                }\n            }\n        }\n    })\n    return tmpdata\n}\n\nexport function parsewikidata(rawwikidata): IWikiData {\n    let tmpdata: IWikiData = createTmpData()\n    rawwikidata.forEach((page) => {\n        page.forEach((item) => {\n            if (item.type) {\n                switch (item.type) {\n                    case wikientries[wikientries.character]:\n                        tmpdata.character.set(item.name, item)\n                        break\n\n                    case wikientries[wikientries.spritesheet]:\n                        tmpdata.spritesheet.set(item.key, item)\n                        break\n\n                    case wikientries[wikientries.image]:\n                        tmpdata.image.set(item.key || item.name, item)\n                        break\n\n                    case wikientries[wikientries.platform]:\n                        tmpdata.platform.set(item.name, item)\n                        break\n\n                    case wikientries[wikientries.mapobject]:\n                        tmpdata.mapobject.set(item.name, item)\n                        break\n\n                }\n            }\n        });\n    })\n    return tmpdata\n}\n\n"],"file":"parseWikiData.js"}