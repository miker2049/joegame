{"version":3,"sources":["../../src/utils/loadMapAssets.ts"],"names":["loadAssets","game","mapjsonpath","Promise","res","reject","mapjson","cache","json","get","wikidata","scene","getScenes","loadTilesets","loadObjectAssets","load","tilemapTiledJSON","loadDialogueFile","once","file","key","console","log","start","path","tilesets","forEach","t","image","fixpath","url","resolve","spritesheet","name","frameConfig","frameWidth","tilewidth","frameHeight","tileheight","margin","spacing","tiles","firstgid","id","toString","characters","charGroups","mapobjects","platforms","layers","l","type","objects","n","push","properties","find","prop","value","Array","from","Set","spritesheets","images","found","character","undefined","texture","group","filter","item","includes","e","mo","mapobject","req_spritesheet","sheet","req_image","p","platform","s","i"],"mappings":"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","sourcesContent":["import TiledRawJSON from \"../types/TiledRawJson\"\nimport { getMapKeyNameRaw, getMapKeyName, getDialogueKeyName } from \"./getKeyNames\"\nimport { IWikiData, wikiCharacterEntry } from \"./parseWikiData\"\nimport wikiData from './wikiData'\nimport * as url from 'url'\n\n/*\n * For loading assets from a LOADED raw tiled json\n * Both the tiled json and wikidata need to be available first\n */\nexport default function loadAssets(game: Phaser.Game, mapjsonpath: string): Promise<Phaser.Game> {\n    return new Promise<Phaser.Game>((res, reject) => {\n        const mapjson: TiledRawJSON = game.cache.json.get(getMapKeyNameRaw(mapjsonpath))\n        const wikidata: IWikiData = wikiData(game)\n        if (!mapjson || !wikidata) reject(\"wikidata and mapjson is not already loaded!\")\n        const scene = game.scene.getScenes(true)[0]\n\n        // scene.load.setBaseURL(ASSETPATH)\n        loadTilesets(scene, mapjson, mapjsonpath)\n        loadObjectAssets(scene, mapjson, wikidata)\n        scene.load.tilemapTiledJSON(getMapKeyName(mapjsonpath), mapjson)\n        loadDialogueFile(scene, mapjsonpath)\n        scene.load.once('complete', () => { res(game) })\n        scene.load.once('loaderror', (file: Phaser.Loader.File) => {\n            if (file.key != getDialogueKeyName(mapjsonpath)) {\n                reject(file)\n            } else {\n                console.log(\"loading default dialogue file\")\n                scene.load.json(getDialogueKeyName(mapjsonpath), 'assets/dialogues/default_dialogue.json')\n            }\n        })\n\n        scene.load.start()\n        // res(game)\n    })\n}\n\nfunction loadTilesets(scene: Phaser.Scene, mapjson: TiledRawJSON, path: string): void {\n    mapjson.tilesets.forEach((t) => {\n        if (t.image) {\n            const fixpath = url.resolve(path, t.image)\n            scene.load.spritesheet({ key: t.name, url: fixpath, frameConfig: { frameWidth: t.tilewidth, frameHeight: t.tileheight, margin: t.margin, spacing: t.spacing } })\n        } else if (t.tiles) {\n            //it is an \"image collection\" tileset, store it by firstgid and all that\n            t.tiles.forEach((tiles) => {\n                if (tiles.image) {\n                    const fixpath = url.resolve(path, tiles.image)\n                    scene.load.image((t.firstgid + tiles.id).toString(), fixpath)\n                }\n            });\n        }\n    });\n}\n\nfunction loadDialogueFile(scene: Phaser.Scene, mapjsonpath: string): void {\n    scene.load.json(getDialogueKeyName(mapjsonpath), \"assets/dialogues/\" + getDialogueKeyName(mapjsonpath) + '.json')\n}\n\nfunction loadObjectAssets(scene: Phaser.Scene, mapjson: TiledRawJSON, wikidata: IWikiData): void {\n\n    let characters = ['player', 'playerturtle', 'Moby']\n    let charGroups: string[] = []\n    let mapobjects: string[] = []\n    let platforms: string[] = []\n    //TODO absolte path\n    mapjson.layers.forEach((l) => {\n        //getting the name of characters prestent on the map\n        if (l.type === \"objectgroup\") {\n\n            if (l.name === 'NPCs') {\n                l.objects?.forEach((n) => {\n                    if (n.name) {\n                        characters.push(n.name)\n                    } else {\n                        charGroups.push(n.properties?.find(prop => prop.name === 'charGroup')?.value ?? 'all')\n                        console.log(charGroups)\n                    }\n                });\n            } else if (l.name === 'Platforms') {\n\n                l.objects?.forEach((n) => {\n                    platforms.push(n.type)\n                })\n            } else if (l.name === 'TweetConvos') {\n\n                l.objects?.forEach((n) => {\n                    charGroups.push(n.properties?.find(prop => prop.name === 'charGroup')?.value ?? 'all')\n                })\n            } else {\n\n                l.objects?.forEach((n) => {\n                    mapobjects.push(n.type)\n                })\n                //we are in object group, but not NPCs, so there might be mapobjects here\n            }\n        }\n    });\n\n    characters = Array.from(new Set(characters))\n    charGroups = Array.from(new Set(charGroups))\n    mapobjects = Array.from(new Set(mapobjects))\n    platforms = Array.from(new Set(platforms))\n    let spritesheets: string[] = [];\n    let images: string[] = [];\n    characters.forEach((n) => {\n        const found = wikidata.character.get(n)\n        if (found != undefined) {\n            spritesheets.push(found.texture)\n        }\n    })\n    charGroups.forEach((n) => {\n        const group = Array.from(wikidata.character).filter(item => item[1].charGroups?.includes(n) || n === 'all');\n        if (group != undefined) {\n            group.forEach(e => spritesheets.push(e[1].texture))\n            // spritesheets.push(found.texture)\n        }\n    })\n    mapobjects.forEach((mo) => {\n        const found = wikidata.mapobject.get(mo)\n        if (found != undefined) {\n            //TODO need req_otherthings too\n            wikidata.mapobject[mo].req_spritesheet.forEach((sheet) => spritesheets.push(sheet))\n            wikidata.mapobject[mo].req_image.forEach((image) => images.push(image))\n        }\n    })\n    platforms.forEach((p) => {\n        const found = wikidata.platform.get(p)\n        if (found != undefined) {\n            spritesheets.push(found.texture)\n        }\n    })\n\n    spritesheets = Array.from(new Set(spritesheets))\n    images = Array.from(new Set(images))\n\n    spritesheets.forEach((s) => {\n        const found = wikidata.spritesheet.get(s)\n        if (found != undefined) {\n            // found.url = url.resolve(TILEMAPDIR, found.url)\n            scene.load.spritesheet(found)\n        }\n    });\n    images.forEach((i) => {\n        const found = wikidata.image.get(i)\n        if (found != undefined) {\n            // found.url = url.resolve(TILEMAPDIR, found.url)\n            scene.load.image(found)\n            // scene.textures.addBase64(found.key, await import(found.url))\n        }\n    });\n\n}\n"],"file":"loadMapAssets.js"}