{"version":3,"sources":["../../src/utils/typewriteText.ts"],"names":["text","twindow","scene","speed","Promise","done","reject","readChars","char","appendMDText","events","emit","owner","then","v","undefined","str","basedelay","cb","length","i","timeout","ms","resolve","setTimeout"],"mappings":";;;;;;;;;;;;;AACA;;AAEe,kBAASA,IAAT,EAAuBC,OAAvB,EAA0CC,KAA1C,EAA+DC,KAA/D,EAAmG;AAC9G,SAAO,IAAIC,OAAJ,CAAY,UAACC,IAAD,EAAOC,MAAP,EAAkB;AACjCC,IAAAA,SAAS,CAACP,IAAD,EAAOG,KAAP,aAAOA,KAAP,cAAOA,KAAP,GAAgB,EAAhB,EAAoB,UAACK,IAAD,EAAkB;AAC3CP,MAAAA,OAAO,CAACQ,YAAR,CAAqBD,IAArB;AACA,UAAIA,IAAI,KAAK,GAAb,EAAkBN,KAAK,CAACQ,MAAN,CAAaC,IAAb,gBAAiCV,OAAO,CAACW,KAAzC;AACrB,KAHQ,CAAT,CAGGC,IAHH,CAGQ,UAAAC,CAAC;AAAA,aAAIT,IAAI,CAACU,SAAD,CAAR;AAAA,KAHT;AAIH,GALM,CAAP;AAMH;;SAEcR,S;;;;;uFAAf,iBAAyBS,GAAzB,EAAsCC,SAAtC,EAAyDC,EAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,MADV,GACmBH,GAAG,CAACG,MADvB;AAEaC,YAAAA,CAFb,GAEiB,CAFjB;;AAAA;AAAA,kBAEoBA,CAAC,GAAGD,MAFxB;AAAA;AAAA;AAAA;;AAGcX,YAAAA,IAHd,GAGqBQ,GAAG,CAACI,CAAD,CAHxB;AAIQF,YAAAA,EAAE,CAACV,IAAD,CAAF;;AAJR,kBAKYA,IAAI,IAAI,GALpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMkBa,OAAO,CAACJ,SAAS,GAAG,GAAb,CANzB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQkBI,OAAO,CAACJ,SAAD,CARzB;;AAAA;AAEgC,cAAEG,CAFlC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,SAASC,OAAT,CAAiBC,EAAjB,EAA6B;AACzB,SAAO,IAAIlB,OAAJ,CAAY,UAAAmB,OAAO;AAAA,WAAIC,UAAU,CAACD,OAAD,EAAUD,EAAV,CAAd;AAAA,GAAnB,CAAP;AACH","sourcesContent":["import { ITextBox } from '../components/TextWindow'\nimport 'phaser'\n\nexport default function(text: string, twindow: ITextBox, scene: Phaser.Scene, speed?: number): Promise<undefined> {\n    return new Promise((done, reject) => {\n        readChars(text, speed ?? 20, (char: string) => {\n            twindow.appendMDText(char)\n            if (char !== ' ') scene.events.emit(`speak_sound`, twindow.owner)\n        }).then(v => done(undefined))\n    })\n}\n\nasync function readChars(str: string, basedelay: number, cb: (T: string) => void) {\n    const length = str.length\n    for (let i = 0; i < length; ++i) {\n        const char = str[i]\n        cb(char)\n        if (char == ' ') {\n            await timeout(basedelay * 1.7)\n        } else {\n            await timeout(basedelay)\n        }\n    }\n\n}\n\n\nfunction timeout(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n"],"file":"typewriteText.js"}