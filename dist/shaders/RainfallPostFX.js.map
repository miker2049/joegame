{"version":3,"sources":["../../src/shaders/RainfallPostFX.ts"],"names":["RainfallPostFX","game","name","fragShader","set1f","console","log","loop","time","renderTarget","set2f","width","height","bindAndDraw","Phaser","Renderer","WebGL","Pipelines","PostFXPipeline"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,c;;;;;AAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,0BAAYC,IAAZ,EAA+B;AAAA;;AAAA;AAC3B,8BAAM;AACFA,MAAAA,IAAI,EAAJA,IADE;AAEFC,MAAAA,IAAI,EAAE,UAFJ;AAGFC,MAAAA,UAAU;AAHR,KAAN;;AA4CA,UAAKC,KAAL,CAAW,cAAX,EAA2B,IAA3B;;AACA,UAAKA,KAAL,CAAW,YAAX,EAAyB,IAAzB,EA9C2B,CA+C3B;AACA;;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAjD2B;AAkD9B;AAED;AACJ;AACA;;;;;WACI,kBAAe,CACX;AACH;;;WAED,uBAAc;AACV,WAAKF,KAAL,CAAW,OAAX,EAAoB,KAAKH,IAAL,CAAUM,IAAV,CAAeC,IAAf,GAAsB,IAA1C;AACH;;;WAED,gBAAOC,YAAP,EAA+D;AAC3D;AAEA,WAAKC,KAAL,CAAW,aAAX,EAA0BD,YAAY,CAACE,KAAvC,EAA8CF,YAAY,CAACG,MAA3D,EAH2D,CAI3D;AACA;;AAEA,WAAKC,WAAL,CAAiBJ,YAAjB;AACH;;;EAvFuCK,MAAM,CAACC,QAAP,CAAgBC,KAAhB,CAAsBC,SAAtB,CAAgCC,c","sourcesContent":["import 'phaser'\n\nexport default class RainfallPostFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {\n\n    /**\n     * The Water Drop Post FX is an effect that allows you to transition\n     * between two objects via an effect that looks like water rippling\n     * out from the surface. You can control the amplitude and speed of\n     * the ripple.\n     *\n     * The source image comes from the Game Object to which the FX is applied,\n     * which can be any Game Object that supports post pipelines, such as a\n     * Sprite, Rope or Layer. You can also transition Cameras and even entire\n     * Scenes. Please see the examples and class docs for further details.\n     *\n     * @param {Phaser.Game} game\n     * @memberof WaterDropPostFX\n     */\n    constructor(game: Phaser.Game) {\n        super({\n            game,\n            name: 'rainfall',\n            fragShader: `\nprecision mediump float;\nuniform float RAIN_DENSITY;\nuniform float BRIGHTNESS;        // raindrop brightness contrast\nconst float BLUR_LENGTH = 30.;        // max length of raindrop blured line\nconst float SPEED = 500.;\n\n#define rnd(p,s)   fract(sin( (p+(.01*s)) *12.9898) * 43758.5453)\nuniform vec2 iResolution;\n\nuniform sampler2D uMainSampler;\nuniform float iTime;\n\nvarying vec2 outFragCoord;\n\nvoid main()\n    {\n    vec2 R = iResolution.xy;\n    vec4 txt = texture2D(uMainSampler, outFragCoord);\n    vec2 U = gl_FragCoord.xy;\n    U -= .4;\n    U.x += 1.5;\n    vec4 O = txt;\n\n    float Ny = RAIN_DENSITY * R.y;            // number of drop per column\n    float LIM = floor(Ny);\n    for (float i=0.0; i<=0.; i++) {     // to deal with more than one drop per column\n        float y = floor( mod( rnd(U.x,2.*i)*R.y -SPEED*iTime, R.y) ); // drop altitude\n        if ( rnd(U.x,2.*i+1.) < (Ny-i) && abs( U.y - y) < BLUR_LENGTH*(U.x/R.x) )\n            O += vec4(0.,0.,BRIGHTNESS,0.); // / (U.x/R.x);  //  / (U.x/R.x); // variant: keep total drop brightness. attention: saturated on the left 5%\n    }\n\n\n   // O = sqrt(O);                              // gamma correction\n\n//    O.rgb += col.rgb * 0.5;\n\n    gl_FragColor = O;\n}`\n        });\n\n        this.set1f('RAIN_DENSITY', 0.03)\n        this.set1f('BRIGHTNESS', 0.27)\n        // this.set1f('slow', 0.5)\n        // this.set1f('gray', 0.1)\n        console.log('wjattt')\n    }\n\n    /**\n     * @ignore\n     */\n    onBoot(): void {\n        // this.setTexture();\n    }\n\n    onPreRender() {\n        this.set1f('iTime', this.game.loop.time / 1000);\n    }\n\n    onDraw(renderTarget: Phaser.Renderer.WebGL.RenderTarget): void {\n        // this.set1f('fromRatio', renderTarget.width / renderTarget.height);\n\n        this.set2f('iResolution', renderTarget.width, renderTarget.height);\n        // console.log(Math.floor(0.003 * renderTarget.height))\n        // this.bindTexture(this.targetTexture, 1);\n\n        this.bindAndDraw(renderTarget);\n    }\n}\n"],"file":"RainfallPostFX.js"}