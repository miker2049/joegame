{"version":3,"sources":["../../src/shaders/WipePostFX.ts"],"names":["wipeFragShader","WipePostFX","game","name","shaders","fragShader","progress","wipeWidth","direction","axis","reveal","setTexture","width","wipeTexture","textures","getFrame","glTexture","texture","phaserTexture","set1i","value","set4f","set1f","renderTarget","set2f","height","bindTexture","bindAndDraw","Phaser","Renderer","WebGL","Pipelines","PostFXPipeline"],"mappings":"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","sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2021 Photon Storm Ltd.\n */\n\nimport Phaser from 'phaser'\n\nconst wipeFragShader = `\n#define SHADER_NAME WIPE_FS\n\nprecision mediump float;\n\nuniform sampler2D uMainSampler;\nuniform sampler2D uMainSampler2;\nuniform vec2 uResolution;\nuniform vec4 uInput;\nuniform float uReveal;\n\nvoid main ()\n{\n    vec2 uv = gl_FragCoord.xy / uResolution.xy;\n\n    vec4 color0;\n    vec4 color1;\n            \n    if (uReveal == 0.0)\n    {\n        color0 = texture2D(uMainSampler, uv);\n        color1 = texture2D(uMainSampler2, vec2(uv.x, 1.0 - uv.y));\n    }\n    else\n    {\n        color0 = texture2D(uMainSampler2, vec2(uv.x, 1.0 - uv.y));\n        color1 = texture2D(uMainSampler, uv);\n    }\n\n    float distance = uInput.x;\n    float width = uInput.y;\n    float direction = uInput.z;\n    float axis = uv.x;\n\n    if (uInput.w == 1.0)\n    {\n        axis = uv.y;\n    }\n\n    float adjust = mix(width, -width, distance);\n    \n    float value = smoothstep(distance - width, distance + width, abs(direction - axis) + adjust);\n\n    gl_FragColor = mix(color1, color0, value);\n}\n`;\n\nexport class WipePostFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline\n{\n    /**\n     * The progress of the wipe effect. From 0 to 1.\n     *\n     * @type {number}\n     * @memberof WipePostFX\n     */\n    progress: number;\n\n    /**\n     * The width of the wipe effect.\n     * \n     * Given as a percentage of the overall texture width, between 0 and 1.\n     *\n     * @type {number}\n     * @memberof WipePostFX\n     * @default 0.1\n     */\n    wipeWidth: number;\n\n    /**\n     * The direction of the effect.\n     *\n     * @type {number}\n     * @memberof WipePostFX\n     * @private\n     */\n    direction: number;\n\n    /**\n     * The axis of the effect.\n     *\n     * @type {number}\n     * @memberof WipePostFX\n     * @private\n     */\n    axis: number;\n\n    /**\n     * Is this a reveal (1) or a wipe (0) ?\n     *\n     * @type {number}\n     * @memberof WipePostFX\n     * @private\n     */\n    reveal: number;\n\n    /**\n     * The WebGL Texture being 'wiped to'.\n     *\n     * @type {WebGLTexture}\n     * @memberof WipePostFX\n     */\n    wipeTexture: WebGLTexture;\n\n    /**\n     * Creates an instance of WipePostFX.\n     * \n     * @param {Phaser.Game} game\n     * @memberof WipePostFX\n     */\n    constructor (game: Phaser.Game)\n    {\n        super({\n            game,\n            name: 'WipePostFX',\n            shaders: [\n                {\n                    name: 'Wipe',\n                    fragShader: wipeFragShader\n                }\n            ]\n        });\n\n        this.progress = 0;\n        this.wipeWidth = 0.1;\n        this.direction = 0;\n        this.axis = 0;\n        this.reveal = 0;\n    }\n\n    /**\n     * @ignore\n     */\n    onBoot (): void\n    {\n        this.setTexture();\n    }\n\n    /**\n     * Set the width of the wipe effect.\n     * \n     * The value is given as a percentage of the overall texture width, from 0 to 1.\n     *\n     * @param {number} [width=0.1] - The width of the effect.\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setWipeWidth (width: number = 0.1): this\n    {\n        this.wipeWidth = width;\n\n        return this;\n    }\n\n    /**\n     * Set the effect to use a Left to Right transition.\n     *\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setLeftToRight (): this\n    {\n        this.direction = 0;\n        this.axis = 0;\n\n        return this;\n    }\n\n    /**\n     * Set the effect to use a Right to Left transition.\n     *\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setRightToLeft (): this\n    {\n        this.direction = 1;\n        this.axis = 0;\n\n        return this;\n    }\n\n    /**\n     * Set the effect to use a Top to Bottom transition.\n     *\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setTopToBottom (): this\n    {\n        this.direction = 1;\n        this.axis = 1;\n\n        return this;\n    }\n\n    /**\n     * Set the effect to use a Bottom to Top transition.\n     *\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setBottomToTop (): this\n    {\n        this.direction = 0;\n        this.axis = 1;\n\n        return this;\n    }\n\n    /**\n     * Use a wipe effect.\n     * \n     * A wipe effect will wipe from one texture to another.\n     * \n     * The alternative is {@link setRevealEffect}.\n     *\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setWipeEffect (): this\n    {\n        this.reveal = 0;\n\n        return this;\n    }\n\n    /**\n     * Use a reveal effect.\n     * \n     * A reveal effect will wipe from a blank (invisible) texture to the object this pipeline is applied to.\n     * \n     * The alternative is {@link setWipeEffect}.\n     *\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setRevealEffect (): this\n    {\n        this.wipeTexture = this.game.textures.getFrame('__DEFAULT').glTexture;\n\n        this.reveal = 1;\n\n        return this;\n    }\n\n    /**\n     * Set the texture to be wiped-to, or revealed.\n     * \n     * The texture must be already loaded and available from the Texture Manager.\n     *\n     * @param {string} [texture='__DEFAULT'] - The key of the texture to use.\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setTexture (texture: string = '__DEFAULT'): this\n    {\n        const phaserTexture = this.game.textures.getFrame(texture);\n\n        if (phaserTexture)\n        {\n            this.wipeTexture = phaserTexture.glTexture;\n        }\n        else\n        {\n            this.wipeTexture = this.game.textures.getFrame('__DEFAULT').glTexture;\n        }\n\n        this.set1i('uMainSampler2', 1);\n\n        return this;\n    }\n\n    /**\n     * Sets the progress of this effect.\n     * \n     * Progress is given as a value between 0 and 1.\n     *\n     * @param {number} [value=0] - The progress of the effect.\n     * @returns {this}\n     * @memberof WipePostFX\n     */\n    setProgress (value: number = 0): this\n    {\n        this.progress = value;\n\n        return this;\n    }\n\n    /**\n     * @ignore\n     */\n    onPreRender (): void\n    {\n        this.set4f('uInput', this.progress, this.wipeWidth, this.direction, this.axis);\n        this.set1f('uReveal', this.reveal);\n    }\n\n    /**\n     * @ignore\n     */\n    onDraw (renderTarget: Phaser.Renderer.WebGL.RenderTarget): void\n    {\n        this.set2f('uResolution', renderTarget.width, renderTarget.height);\n\n        this.bindTexture(this.wipeTexture, 1);\n\n        this.bindAndDraw(renderTarget);\n    }\n}\n"],"file":"WipePostFX.js"}