{"version":3,"sources":["../../src/shaders/Blobs.ts"],"names":["Blobs","game","name","fragShader","console","log","set1f","loop","time","renderTarget","set2f","width","height","bindAndDraw","Phaser","Renderer","WebGL","Pipelines","PostFXPipeline"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;;;;;IAEqBA,K;;;;;AAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,iBAAYC,IAAZ,EAA+B;AAAA;;AAAA;AAC3B,8BAAM;AACFA,MAAAA,IAAI,EAAJA,IADE;AAEFC,MAAAA,IAAI,EAAE,OAFJ;AAGFC,MAAAA,UAAU;AAHR,KAAN,EAD2B,CAkF3B;AACA;AACA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAtF2B;AAuF9B;AAED;AACJ;AACA;;;;;WACI,kBAAe;AACX;AACA,WAAKC,KAAL,CAAW,OAAX,EAAoB,CAApB;AACH;;;WAED,uBAAc;AACV,WAAKA,KAAL,CAAW,OAAX,EAAoB,KAAKL,IAAL,CAAUM,IAAV,CAAeC,IAAf,GAAsB,IAA1C;AACH;;;WAED,gBAAOC,YAAP,EAA+D;AAC3D;AACA,WAAKC,KAAL,CAAW,aAAX,EAA0BD,YAAY,CAACE,KAAvC,EAA8CF,YAAY,CAACG,MAA3D;AACA,WAAKC,WAAL,CAAiBJ,YAAjB;AACH;;;EAzH8BK,gBAAOC,QAAP,CAAgBC,KAAhB,CAAsBC,SAAtB,CAAgCC,c","sourcesContent":["\nimport Phaser from 'phaser';\n\nexport default class Blobs extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {\n\n    /**\n     * The Water Drop Post FX is an effect that allows you to transition\n     * between two objects via an effect that looks like water rippling\n     * out from the surface. You can control the amplitude and speed of\n     * the ripple.\n     *\n     * The source image comes from the Game Object to which the FX is applied,\n     * which can be any Game Object that supports post pipelines, such as a\n     * Sprite, Rope or Layer. You can also transition Cameras and even entire\n     * Scenes. Please see the examples and class docs for further details.\n     *\n     * @param {Phaser.Game} game\n     * @memberof WaterDropPostFX\n     */\n    constructor(game: Phaser.Game) {\n        super({\n            game,\n            name: 'blobs',\n            fragShader: `\n// Blobs by @paulofalcao\n\nprecision mediump float;\n\n\nuniform vec2 iResolution;\nuniform sampler2D uMainSampler;\nuniform float iTime;\nuniform float scale;\n\nvarying vec2 outFragCoord;\n\n#define time iTime\n\nfloat makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){\n   float xx=x+sin(t*fx)*sx;\n   float yy=y+cos(t*fy)*sy;\n   return 1.0/sqrt(xx*xx+yy*yy);\n}\nvoid blobber(vec2 pos){\n  vec4 fragColor = texture2D(uMainSampler, outFragCoord);\n  vec2 fragCoord = gl_FragCoord.xy;\n   vec2 p=(fragCoord.xy/iResolution.x)*2.0-vec2(1.0,iResolution.y/iResolution.x);\n\n   p=p*8.0*scale;\n\n    vec2 pp = vec2(-2.0*pos.x,-2.0*pos.y) + (2.0 * gl_FragCoord.xy / iResolution.xy);\n   pp=pp*8.0*scale;\n   float x=pp.x;\n   float y=pp.y;\n// x += iResolution.x*0.125;\n// y -= 2.1;\n   float a=\n       makePoint(x,y,3.3,2.9,0.3,0.3,time);\n   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,time);\n   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,time);\n   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,time);\n   a=a+makePoint(x,y,0.8,1.7,0.5,0.4,time);\n   a=a+makePoint(x,y,0.3,1.0,0.4,0.4,time);\n   a=a+makePoint(x,y,1.4,1.7,0.4,0.5,time);\n   a=a+makePoint(x,y,1.3,2.1,0.6,0.3,time);\n   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,time);\n\n   float b=\n       makePoint(x,y,1.2,1.9,0.3,0.3,time);\n   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,time);\n   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,time);\n   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,time);\n   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,time);\n   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,time);\n   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,time);\n   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,time);\n   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,time);\n\n   float c=\n       makePoint(x,y,3.7,0.3,0.3,0.3,time);\n   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,time);\n   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,time);\n   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,time);\n   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,time);\n   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,time);\n   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,time);\n   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,time);\n   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,time);\n\n   vec3 d=vec3(a,b,c)/32.0;\n\n   fragColor += vec4(d.x,d.y,d.z,(d.x+d.y+d.z)/3.0);\n   gl_FragColor = fragColor;\n}\n\nvoid main() {\n  blobber(vec2(0.75,0.25));\n}\n`\n        });\n\n        // this.set1f('RAIN_DENSITY', 0.03)\n        // this.set1f('BRIGHTNESS', 0.27)\n        // this.set1f('slow', 0.5)\n        // this.set1f('gray', 0.1)\n        console.log('wjattt')\n    }\n\n    /**\n     * @ignore\n     */\n    onBoot(): void {\n        // this.setTexture();\n        this.set1f('scale', 1);\n    }\n\n    onPreRender() {\n        this.set1f('iTime', this.game.loop.time / 1000);\n    }\n\n    onDraw(renderTarget: Phaser.Renderer.WebGL.RenderTarget): void {\n        // this.game.phy\n        this.set2f('iResolution', renderTarget.width, renderTarget.height);\n        this.bindAndDraw(renderTarget);\n    }\n}\n"],"file":"Blobs.js"}