{"version":3,"sources":["../../src/shaders/DoomWipePostFX.ts"],"names":["fragShader","DoomWipePostFX","game","name","progress","resizeMode","toRatio","bars","amplitude","noise","frequency","dripScale","setTexture","mode","texture","phaserTexture","textures","getFrame","width","height","targetTexture","glTexture","undefined","set1i","set1f","value","Phaser","Math","Clamp","renderTarget","bindTexture","bindAndDraw","Renderer","WebGL","Pipelines","PostFXPipeline"],"mappings":";;;;;;;;;;;;;;;;;;;AAMA;;;;;;AAEA,IAAMA,UAAU,4uEAAhB;;IAuGaC,c;;;;;AAET;AACJ;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,0BAAaC,IAAb,EACA;AAAA;;AAAA;AACI,8BAAM;AACFA,MAAAA,IAAI,EAAJA,IADE;AAEFC,MAAAA,IAAI,EAAE,gBAFJ;AAGFH,MAAAA,UAAU,EAAVA;AAHE,KAAN;AAMA,UAAKI,QAAL,GAAgB,CAAhB;AACA,UAAKC,UAAL,GAAkB,CAAlB;AACA,UAAKC,OAAL,GAAe,CAAf;AAEA,UAAKC,IAAL,GAAY,EAAZ;AACA,UAAKC,SAAL,GAAiB,CAAjB;AACA,UAAKC,KAAL,GAAa,GAAb;AACA,UAAKC,SAAL,GAAiB,GAAjB;AACA,UAAKC,SAAL,GAAiB,GAAjB;AAfJ;AAgBC;AAED;AACJ;AACA;;;;;WACI,kBACA;AACI,WAAKC,UAAL;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,yBACA;AAAA,UADeC,IACf,uEAD8B,CAC9B;AACI,WAAKR,UAAL,GAAkBQ,IAAlB;AAEA,aAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sourcesContent":["/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Zeh Fernando\n * @copyright    2021 Photon Storm Ltd.\n */\n\nimport Phaser from 'phaser';\n\nconst fragShader = `\n#define SHADER_NAME DOOMWIPE_FS\n\nprecision mediump float;\n\nuniform sampler2D uMainSampler;\nuniform sampler2D uMainSampler2;\n\nuniform int resizeMode;\nuniform float progress;\nuniform float fromRatio;\nuniform float toRatio;\n\nvarying vec2 outFragCoord;\n\n//  Transition specific\nuniform int bars;\nuniform float amplitude;\nuniform float noise;\nuniform float frequency;\nuniform float dripScale;\n\nvec4 getFromColor (vec2 uv)\n{\n    return texture2D(uMainSampler, uv);\n}\n\nvec4 getToColor (vec2 uv)\n{\n    if (resizeMode == 2)\n    {\n        //  cover\n        return texture2D(uMainSampler2, 0.5 + (vec2(uv.x, 1.0 - uv.y) - 0.5) * vec2(min(fromRatio / toRatio, 1.0), min((toRatio / fromRatio), 1.0)));\n    }\n    else if (resizeMode == 1)\n    {\n        //  contain\n        return texture2D(uMainSampler2, 0.5 + (vec2(uv.x, 1.0 - uv.y) - 0.5) * vec2(max(fromRatio / toRatio, 1.0), max((toRatio / fromRatio), 1.0)));\n    }\n    else\n    {\n        //  stretch\n        return texture2D(uMainSampler2, vec2(uv.x, 1.0 - uv.y));\n    }\n}\n\n// Transition Author: Zeh Fernando\n// Transition License: MIT\n\nfloat rand (int num)\n{\n    return fract(mod(float(num) * 67123.313, 12.0) * sin(float(num) * 10.3) * cos(float(num)));\n}\n  \nfloat wave (int num)\n{\n    float fn = float(num) * frequency * 0.1 * float(bars);\n    return cos(fn * 0.5) * cos(fn * 0.13) * sin((fn+10.0) * 0.3) / 2.0 + 0.5;\n}\n  \nfloat drip (int num)\n{\n    return sin(float(num) / float(bars - 1) * 3.141592) * dripScale;\n}\n  \nfloat pos (int num)\n{\n    return (noise == 0.0 ? wave(num) : mix(wave(num), rand(num), noise)) + (dripScale == 0.0 ? 0.0 : drip(num));\n}\n  \nvec4 transition (vec2 uv)\n{\n    int bar = int(uv.x * (float(bars)));\n    float scale = 1.0 + pos(bar) * amplitude;\n    float phase = progress * scale;\n    float posY = uv.y / vec2(1.0).y;\n\n    vec2 p;\n    vec4 c;\n\n    if (phase + posY < 1.0)\n    {\n        p = vec2(uv.x, uv.y + mix(0.0, vec2(1.0).y, phase)) / vec2(1.0).xy;\n        c = getFromColor(p);\n    }\n    else\n    {\n        p = uv.xy / vec2(1.0).xy;\n        c = getToColor(p);\n    }\n\n    // Finally, apply the color\n    return c;\n}\n\nvoid main ()\n{\n    vec2 uv = outFragCoord;\n\n    gl_FragColor = transition(uv);\n}\n`;\n\nexport class DoomWipePostFX extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline\n{\n    /**\n     * The progress of the transition effect. From 0 to 1.\n     *\n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    progress: number;\n\n    /**\n     * The WebGL Texture being transitioned to.\n     *\n     * @type {WebGLTexture}\n     * @memberof DoomWipePostFX\n     */\n    targetTexture: WebGLTexture;\n\n    /**\n     * The resize mode to be used for the target texture.\n     * \n     * Can be either 0, 1 or 2, for stretch, contain and cover modes respectively.\n     * \n     * The default is 'contain'.\n     * \n     * Set via the `setResizeMode` method.\n     *\n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    resizeMode: number;\n\n    /**\n     * The ratio of the target texture (width / height).\n     * \n     * This is set automatically in the `setTexture` method.\n     *\n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    toRatio: number;\n\n    /**\n     * The total number of bars / columns.\n     * \n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    bars: number;\n\n    /**\n     * Multiplier for the speed ratio.\n     * \n     * 0 = No variation when going down.\n     * Higher = Some elements go much faster.\n     * \n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    amplitude: number;\n\n    /**\n     * Further variations in speed.\n     * \n     * 0 = No noise\n     * 1 = Super noisy (ignore frequency)\n     * \n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    noise: number;\n\n    /**\n     * Horizontal speed variation.\n     * \n     * The bigger the value, the shorter the waves.\n     * \n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    frequency: number;\n\n    /**\n     * How much the bars seem to \"run\" from the middle of the screen\n     * first (sticking to the sides).\n     * \n     * 0 = No drip\n     * 1 = Curved drip\n     * \n     * @type {number}\n     * @memberof DoomWipePostFX\n     */\n    dripScale: number;\n\n    /**\n     * The Doom Wipe Post FX is an effect that allows you to transition\n     * between two objects via an effect that looks like the effect used\n     * in the classic FPS game Doom.\n     * \n     * You can control the number of bars, amplitude, frequency and more.\n     * \n     * The source image comes from the Game Object to which the FX is applied,\n     * which can be any Game Object that supports post pipelines, such as a\n     * Sprite, Rope or Layer. You can also transition Cameras and even entire\n     * Scenes. Please see the examples and class docs for further details.\n     * \n     * @param {Phaser.Game} game\n     * @memberof DoomWipePostFX\n     */\n    constructor (game: Phaser.Game)\n    {\n        super({\n            game,\n            name: 'DoomWipePostFX',\n            fragShader\n        });\n\n        this.progress = 0;\n        this.resizeMode = 1;\n        this.toRatio = 0;\n\n        this.bars = 30;\n        this.amplitude = 2;\n        this.noise = 0.1;\n        this.frequency = 0.5;\n        this.dripScale = 0.5;\n    }\n\n    /**\n     * @ignore\n     */\n    onBoot (): void\n    {\n        this.setTexture();\n    }\n\n    /**\n     * Set the resize mode of the target texture.\n     * \n     * Can be either:\n     * \n     * 0 - Stretch. The target texture is stretched to the size of the source texture.\n     * 1 - Contain. The target texture is resized to fit the source texture. This is the default.\n     * 2 - Cover. The target texture is resized to cover the source texture.\n     * \n     * If the source and target textures are the same size, then use a resize mode of zero\n     * for speed.\n     *\n     * @param {number} [mode=1] - The Resize Mode. Either 0, 1 or 2.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setResizeMode (mode: number = 1): this\n    {\n        this.resizeMode = mode;\n\n        return this;\n    }\n\n    /**\n     * Set the texture to be transitioned to.\n     * \n     * The texture must be already loaded and available from the Texture Manager.\n     * \n     * You can optionally also set the resize mode. This can be either:\n     * \n     * 0 - Stretch. The target texture is stretched to the size of the source texture.\n     * 1 - Contain. The target texture is resized to fit the source texture. This is the default.\n     * 2 - Cover. The target texture is resized to cover the source texture.\n     * \n     * If the source and target textures are the same size, then use a resize mode of zero\n     * for speed.\n     *\n     * @param {string} [texture='__DEFAULT'] - The key of the texture to use.\n     * @param {number} [mode] - The Resize Mode. Either 0, 1 or 2.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setTexture (texture: string = '__DEFAULT', resizeMode?: number): this\n    {\n        let phaserTexture = this.game.textures.getFrame(texture);\n\n        if (!phaserTexture)\n        {\n            phaserTexture = this.game.textures.getFrame('__DEFAULT');\n        }\n\n        this.toRatio = phaserTexture.width / phaserTexture.height;\n\n        this.targetTexture = phaserTexture.glTexture;\n\n        if (resizeMode !== undefined)\n        {\n            this.resizeMode = resizeMode;\n        }\n\n        this.set1i('uMainSampler2', 1);\n        this.set1f('toRatio', this.toRatio);\n\n        return this;\n    }\n\n    /**\n     * Sets the progress of this effect.\n     * \n     * Progress is given as a value between 0 and 1.\n     * \n     * You can call this method at any point, or modify the `progress` property\n     * directly for the same result. This can be done via tweens, Scene transitions,\n     * Loader progress updates or any other system.\n     *\n     * @param {number} [value=0] - The progress of the effect. A value between 0 and 1.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setProgress (value: number = 0): this\n    {\n        this.progress = Phaser.Math.Clamp(value, 0, 1);\n\n        return this;\n    }\n\n    /**\n     * Sets the number of bars / columns that drop down.\n     * \n     * @param {number} [value=30] - The number of bars / columns.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setBars (value: number = 30): this\n    {\n        this.bars = value;\n\n        return this;\n    }\n\n    /**\n     * Sets the multiplier for the drop speed ratio.\n     * \n     * 0 = No variation when going down.\n     * Higher = Some elements go much faster.\n     * \n     * @param {number} [value=2] - The amplitude.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setAmplitude (value: number = 2): this\n    {\n        this.amplitude = value;\n\n        return this;\n    }\n\n    /**\n     * Further variations in speed.\n     * \n     * 0 = No noise\n     * 1 = Super noisy (ignore frequency)\n     * \n     * @param {number} [value=0.1] - The noise.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setNoise (value: number = 0.1): this\n    {\n        this.noise = value;\n\n        return this;\n    }\n\n    /**\n     * Horizontal speed variation.\n     * \n     * The bigger the value, the shorter the waves.\n     * \n     * @param {number} [value=0.5] - The frequency.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setFrequency (value: number = 0.5): this\n    {\n        this.frequency = value;\n\n        return this;\n    }\n\n    /**\n     * How much the bars seem to \"run\" from the middle of the screen\n     * first (sticking to the sides).\n     * \n     * 0 = No drip\n     * 1 = Curved drip\n     * \n     * @param {number} [value=0.5] - The drip scale.\n     * @returns {this}\n     * @memberof DoomWipePostFX\n     */\n    setDripScale (value: number = 0.5): this\n    {\n        this.dripScale = value;\n\n        return this;\n    }\n\n    /**\n     * @ignore\n     */\n    onPreRender (): void\n    {\n        this.set1f('progress', this.progress);\n        this.set1i('resizeMode', this.resizeMode);\n\n        this.set1i('bars', this.bars);\n        this.set1f('amplitude', this.amplitude);\n        this.set1f('noise', this.noise);\n        this.set1f('frequency', this.frequency);\n        this.set1f('dripScale', this.dripScale);\n    }\n\n    /**\n     * @ignore\n     */\n    onDraw (renderTarget: Phaser.Renderer.WebGL.RenderTarget): void\n    {\n        this.set1f('fromRatio', renderTarget.width / renderTarget.height);\n\n        this.bindTexture(this.targetTexture, 1);\n\n        this.bindAndDraw(renderTarget);\n    }\n}\n"],"file":"DoomWipePostFX.js"}