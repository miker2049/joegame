:PROPERTIES:
:UNNUMBERED: t
:DIR: ../../assets/org/
:END:
#+STARTUP: nofninline
#+title: Whatever - #01

#+begin_subtitle
A forging ahead!
#+end_subtitle
* Preliminaries :ATTACH:


#+begin_epigraph
#+begin_quote
The coming being is whatever being.
#+begin_footer
Giorgio Agamben, /The Coming Community/
#+end_footer
#+end_quote
#+end_epigraph

We need to not waste time, need to be /in/ this as soon as possible.  As soon as we commit to this, a latency will be created.  Between the reading part and the code part.  Between the game as it is only right now /conceived/ and the things we can talk about.  But in truth I am getting ahead... there are actually multiple big differences at work here, I will list them in how important I think they are right now.
- between source code and compiled
- between present and past, both in the trivial sense (that what I said in the past is being repeated now) and in an even more troubling way (that the history of the text itself is materially knocking of the doors of whatever text is being read in the present)
- between the game and me, the developer
- between the player and the user
- between GNU Emacs and me

When are teaching a child how to play the piano, you sit them on the bench and say: "for the piano /this/ is 'down', and /this/ is 'up'" as you gesture from the left to the right.  A little later, you might look at some notes on a page and point to a note below the staff, a /lower/ note...
** time into space
As for the second point... It brings with it an atmosphere of complicated emotions: fidelity, duty, purity.  It's main point is this: what you are reading has submitted itself into VERSION CONTROL, a pure infrastructure the keeps a log of changes over time.  What you are reading is technically a draft, somewhere along the way, it may be edited.  But it will always be complete, insofar as you are reading it.  The fidelity comes in when you need to decide when we can move on, mark a spot as landmark and go forward.  In reality, what git does is just as much logging changes over /space/ as it is over /time/.  The code that it typically consumes doesn't age with wrinkles, unless you want to be cute about somebodies style, it merely changes shape.  Like the old oak lines, the code /expresses/ its time all at once under version control.

This device, git, is most useful as a kind valve.  The infrastructure of software is a high speed money-fueled race with no end, where laws of economics inspire systems which bends together individual labors of coding so that they may all pour into a more consilidated stream.  Issue's, tickets, social interfaces come to the river like haggard explorers, to commune with the source they have followed for awhile, and attempt to influence the branching streams into grander striations across the rock. But we will not play out this exhausting show, our stream is quite small, and I don't expect many explorers peeking around the bushes any time soon.
** a guiding light for now
Time will tell how successful we will be.  Already I feel myself getting pulled apart by all the different places I have to be right now.  Each spurt of focus has to dodge many holes into many possibilities.

One reason it has been hard to make joegame is that there is no clear place for me to wedge in.  Its more like I have dive down into deep water and just barely make a few scratches at the quickly rusting machinery before having to go up for air.

The guiding light will be to extend the space metaphor out a lot, to collapse the changes over time, with changes in space.  Like a typewriter or
* pulling ourselves up...
"Bootstrapping" is a concept where code /creates from itself/ the conditions of its own compilation.  In our schema, this first dev log shares many similarities with this process.  What I write here, in fact, will be mainly code for Emacs to generate the right HTML and CSS once we export this and the following dev log entries.  This is in part because I am writing this text in an Org mode file, which has the ability to make files from itself, or rather, from the "blocks" I make within this file.

To demonstrate, and to also /do/, let us steal and modify some CSS code
** Tufte CSS

As per the final decision of The Editors
