#+title: Readme

* start
There are things called particles.
#+begin_quote
Then follows this, that nature brew up each thing again into its own first-bodies, nor does she destroy resolved ought into nothing. For if anything were mortal in all its parts, each thing would on a sudden be snatched from our eyes, and pass away.
#+end_quote


** Particles
#+name: joegame-particles
| name                    | color 1 | color 2 | base wang mask | variations |
|-------------------------+---------+---------+----------------+------------|
| depths-drop             | #313e49 | #313e49 | smooth         | full       |
| depths-drop             | #313e49 | #313e49 | smooth         | full       |
| depths-drop             | #313e49 | #313e49 | smooth         | full       |
| trench-drop             | #5c758a | #5c758a | smooth         | full       |
| ocean-drop              | #B7C4CF | #B7C4CF | smooth         | full       |
| lake-drop               | #4AA0DF | #4AA0DF | smooth         | full       |
| grass-blade             | #1A9C4F | #32D083 | terrain        | all        |
| dead-grass-blade        | #897F38 | #B7AB55 | terrain        | all        |
| dirt-speck              | #967054 | #9F785A | smooth         | all        |
| rock-speck              | #464646 | #BFBFBF | terrain        | sparse     |
| gem                     | #0055B6 | #003A9E | terrain        | sparse     |
| quartz                  | #74453B | #BE9C92 | terrain        | sparse     |
| clay                    | #905932 | #905932 | smooth         | all        |
| stone                   | #9DA8A9 | #ADB8B9 | smooth         | all        |
| glass                   | #A8B77E | #A8B77E | terrain        | sparse     |
| sand                    | #E5BEA6 | #ECD0B8 | smooth         | all        |
| wet-sand                | #DBAB69 | #DAAC70 | smooth         | all        |
| pine-needle             | #7A3703 | #7B4602 | terrain        | sparse     |
| piece-of-plastic-blue   | #0078F8 | #007BF9 | terrain        | sparse     |
| piece-of-plastic-red    | #B51800 | #941B19 | terrain        | sparse     |
| piece-of-plastic-yellow | #AE9D11 | #C5B81D | terrain        | sparse     |
| bark                    | #5C3624 | #AE785E | terrain        | sparse     |

#+begin_src lisp :var jp=joegame-particles :results file :file "particles.data.lisp"

  (print
   (mapcar #'(lambda (it)
               (list
                :name (car it)
                :c1 (cadr it)
                :c2 (caddr it)
                ;; :c1(parse-integer (remove #\# (cadr it)) :radix 16)
                ;; :c2(parse-integer (remove #\# (caddr it)) :radix 16)
                :mask (cadddr it)
                :variations (nth 4 it)))
           jp))
#+end_src

#+RESULTS:
[[file:particles.data.lisp]]



* Generating tile/wang images
** terrain full generation
*** mask terrain
#+begin_src bash :shebang "#!/usr/bin/env bash" :tangle gen_terr
# Set default shadow strength
input_path="test.png"
mask_path="mask.png"
output_path="out.png"
strength="30x1+1+1"
bevel_color="pink"
bevel=0

# Function to print help message
print_help() {
  echo "Usage: gen_terr [OPTIONS]"
  echo ""
  echo "Generate terrain for wang masks from an image."
  echo ""
  echo "Options:"
  echo "  -h Show this help message and exit"
  echo "  -s Set shadow strength (default: 30x1+1+1)"
  echo "  -b enable bevel"
  echo "  -c set bevel color (e.g. 'pink')"
  echo "  -i The input 'terrain' file"
  echo "  -m The mask"
  echo "  -o output path"
}

blob() {
  local out=$1
  local size=$2
  magick -size 96x96 xc:  -channel G +noise Uniform \
      -virtual-pixel Tile -blur 0x$size -auto-level \
      -separate +channel static.png
  magick  static.png -ordered-dither threshold,2  $out
  rm -f static.png
}

add_noise() {
  local inn=$1
  local out=$2
  magick -size 96x96 xc:none -seed 1000 +noise random \
      -channel green -separate +channel -threshold 94% -transparent white noise.png
  # magick noise.png $out
  magick  noise.png $inn \
      -compose Dst_Over -composite $out
}

# Function to generate Wang Mask Tiles
generate_tiles() {
  local img=$1
  local outprefix=$2
  mkdir -p wang-tiles
  magick "$img" +gravity -crop 16x16 +repage $(printf "%s_%%d.png" $outprefix)
}

# Function to generate terrain tiles
gen_terr_tiles() {
  local dst=$1
  mask=$2
  local out=$3
  echo $dst
  magick $1 \( $2 -transparent black \) -compose Dst_In -alpha Set -composite $3

  if [[ $bevel == 1 ]]; then
      if identify -format '%[opaque]' $3 | grep -q 'False'; then
          magick $3 \( +clone -morphology Edge Diamond -fill $bevel_color -colorize 100 -transparent white \) -layers merge $3
      fi
  fi
  magick $3 -transparent white $3
  magick $3 \( +clone -background black -shadow $strength \) \
      -background none -compose Dst_Over -flatten $3
}

# Function to merge tiles
merge_tiles() {
    local tilesprefix=$1
    local out=$2
    local files=""
    for i in {0..35}; do files="$files $(printf "%s_%d.png" $tilesprefix $i)"; done;
    magick montage $files -background none -geometry 16x16+0+0 "$out"
}

# main function to generate terrains
gen_terr() {
    local image=$1
    local wang=$2
    local out=$3
    local outdir=$(mktemp -d)
    generate_tiles $image $(printf "%s%s" $outdir "/itile" ) &\
        generate_tiles $wang $(printf "%s%s" $outdir "/wtile" )
        wait
        for i in {0..35}; do gen_terr_tiles $(printf "%s%s_%d.png" $outdir "/itile" $i) \
            $(printf "%s%s_%d.png" $outdir "/wtile" $i) \
            $(printf "%s%s_%d.png" $outdir "/ftile" $i) &
        done
        wait
        merge_tiles $(printf "%s%s" $outdir "/ftile") $out
        rm -rf $outdir
}

# Parse arguments

while getopts ":hbs:c:o:m:i:" opt; do
  case ${opt} in
    h )
      print_help
      exit 0
      ;;
    s )
      strength=$OPTARG
      ;;
    b )
      bevel=1
      ;;
    c )
      bevel_color=$OPTARG
      ;;
    i )
      input_path=$OPTARG
      ;;
    o )
      output_path=$OPTARG
      ;;
    m )
      mask_path=$OPTARG
      ;;
    \? )
      echo "Error: Invalid option -$OPTARG"
      exit 1
      ;;
  esac
done
gen_terr $input_path $mask_path $output_path
# add_noise "$1" "$2"
#+end_src

** add noise
#+begin_src bash :shebang "#!/usr/bin/env bash" :tangle add_noise

blob() {
  local out=$1
  local size=$2
  magick -size 96x96 xc:  -channel G +noise Uniform \
      -virtual-pixel Tile -blur 0x$size -auto-level \
      -separate +channel static.png
  magick  static.png -ordered-dither threshold,2  $out
  rm -f static.png
}

add_noise() {
  local inn=$1
  local amount=$2
  local out=$3
  local seed=$4

  # if seed is not provided, get a random value
  if [ -z "$seed" ]
  then
    seed=$RANDOM
    echo $seed
  fi

  magick -size 96x96 \( xc:none -seed $seed +noise random \
      -channel green -separate +channel -threshold "${amount}%" \) $inn \
      -compose Minus_Dst -composite $out
}

# Display usage message if not enough args or -h is supplied
if [ $# -lt 3 ] || [ "$1" = "-h" ]; then
  echo "Usage: $0 infile amount outputfile [seed]"
  echo "infile: input file name"
  echo "amount: noise amount"
  echo "outputfile: output file name"
  echo "seed: (optional) seed for random noise"
else
  add_noise $1 $2 $3 $4
fi
#+end_src
*** create noise series
#+begin_src bash :shebang "#!/usr/bin/env bash" :tangle create_noise_series
input=$1
seed=$2
basename="${input%.*}"
./add_noise $input 5 "${basename}-50.png" $seed
./add_noise $input 99.7 "${basename}-999.png" $seed
for idx in $(seq 100 100 900); do ./add_noise $input $(($idx/10)) "${basename}-${idx}.png" $seed; done
echo $basename
#+end_src

run that..
#+begin_src bash :var input="wang-masks/terr_wang-mask.png" seed=420
./create_noise_series $input $seed
#+end_src

#+RESULTS:
: wang-masks/terr_wang-mask

* Generate labeled preview
#+begin_src bash :shebang "#!/usr/bin/env -S bash" :tangle label_tile
# create temporary directory
mkdir -p temp
font=/nix/store/bhq1mhgy0vwlvqi482g82vzkw4wldb89-iosevka-23.0.0/share/fonts/truetype/iosevka-regular.ttf
# loop over all images in the current directory
for img in ./terr-images/*.png; do
    # extract the filename without the extension
    filename=$(basename "$img" .png)
    # use ImageMagick to annotate the image with its filename
    convert "$img" -size 320x50 -font $font label:$filename -append \
        "temp/$(basename $img)"

done
# stitch annotated images together
magick montage temp/*.png -tile 6x terrains.png

# clean up temporary directory
rm -r temp
#+end_src
* terrain set
#+begin_src lisp :package worldconf :results value table
(defun terrain-set-to-org-table (ts)
  (append
   nil
    ;; (list "name" "id" "color" "margin" "spacing" "imagepath")
    (mapcar #'(lambda (item)
                (let* ((item* (cdr item))
                        (tileset (getf item* :tileset)))
                    (list
                    (getf item* :name)
                    (getf item* :id)
                    (getf item* :priority)
                    (getf item* :wang-tiles)
                    (format nil "#~6,'0x"
                      (getf item* :color))
                    (tiledmap:margin tileset)
                    (tiledmap:spacing tileset)
                    (format nil "~a"
                      (tiledmap:image tileset)))))
            ts)))
    (terrain-set-to-org-table *terrain-set*)

#+end_src

#+RESULTS:
| deep-underwater |  0 |     0 | :TERRAIN       | #B7C4CF | 0 | 0 | /home/mik/joegame/assets/images/terr_trench.png      |
| ocean           |  1 |  1000 | :THICK-TERRAIN | #B7C4CF | 0 | 0 | /home/mik/joegame/assets/images/terr_ocean.png       |
| algea-ocean     |  2 |  2000 | :THICK-TERRAIN | #B7C4CF | 0 | 0 | /home/mik/joegame/assets/images/terr_water.png       |
| clay2           |  3 |  3000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2.png                             |
| terr_clay2_50   |  4 |  4000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_50.png                          |
| terr_clay2_100  |  5 |  5000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_100.png                         |
| terr_clay2_200  |  6 |  6000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_200.png                         |
| terr_clay2_300  |  7 |  7000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_300.png                         |
| terr_clay2_400  |  8 |  8000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_400.png                         |
| terr_clay2_500  |  9 |  9000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_500.png                         |
| terr_clay2_600  | 10 | 10000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_600.png                         |
| terr_clay2_700  | 11 | 11000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_700.png                         |
| terr_clay2_800  | 12 | 12000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_800.png                         |
| terr_clay2_900  | 13 | 13000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_900.png                         |
| terr_clay2_999  | 14 | 14000 | :TERRAIN       | #A9612D | 0 | 0 | generated_terr_clay2_999.png                         |
| clay            | 15 | 15000 | :TERRAIN       | #C38154 | 0 | 0 | /home/mik/joegame/assets/images/terr_clay.png        |
| simple-dirt     | 16 | 16000 | :TERRAIN       | #007E76 | 0 | 0 | /home/mik/joegame/assets/images/terr_dirt.png        |
| dirt            | 17 | 17000 | :TERRAIN       | #007E76 | 0 | 0 | /home/mik/joegame/assets/images/terr_dirt.png        |
| grass-patches   | 18 | 18000 | :TERRAIN       | #A0D8B3 | 0 | 0 | /home/mik/joegame/assets/images/terr_grass_patch.png |
| grass           | 19 | 19000 | :TERRAIN       | #A0D8B3 | 0 | 0 | /home/mik/joegame/assets/images/terr_grass.png       |
| deep-grass      | 20 | 20000 | :TERRAIN       | #A2A378 | 0 | 0 | /home/mik/joegame/assets/images/terr_grass.png       |
| sand            | 21 | 21000 | :TERRAIN       | #EEE3CB | 0 | 0 | /home/mik/joegame/assets/images/terr_sand.png        |
| hard-sand       | 22 | 22000 | :TERRAIN       | #D7C0AE | 0 | 0 | /home/mik/joegame/assets/images/terr_sand2.png       |
| stone           | 23 | 23000 | :TERRAIN       | #D6E8DB | 0 | 0 | /home/mik/joegame/assets/images/terr_sand.png        |
| cliff           | 24 | 24000 | :TERRAIN       | #000000 | 0 | 0 | /home/mik/joegame/assets/images/terr_sand.png        |
| stone           | 25 | 25000 | :TERRAIN       | #F6F1F1 | 0 | 0 | /home/mik/joegame/assets/images/terr_cobble.png      |
| ice             | 26 | 26000 | :TERRAIN       | #AFD3E2 | 0 | 0 | /home/mik/joegame/assets/images/terr_ice.png         |
| lake            | 27 | 27000 | :THICK-TERRAIN | #AFD3E2 | 0 | 0 | /home/mik/joegame/assets/images/terr_water.png       |
* generating tiles
** definitions
When we talk about tiles, we reference specific square sections of an actual image file.  A tileset is an image file with some extra data around it: tile height, tile width, margin, and spacing, where margin is the amount of pixels that make up the widths and heights of borders around the image, and spacing is the amount of pixels between the tiles. Each map (tiled json file), contains an array of tilesets.

In creating world stuff, the images used in tilesets are expected to conform to a certain wang-template.  A wang-template is just a certain map with one tileset that renders a grid of 16 wang quads (really, a wang /tile/, but thats too confusing). A wang quad is some grid of tiles, historically a 4x4 grid, and the full set of 16 make up all possible combinations of corners filled or unfilled.

*1:*
00
00

*2:*
01
00

*3:*
00
01

*4:*
01
01
 ...
*16:*
11
11

The main way to assure a tileset image can work with a wang-template is with a wang-terr-mask. We say terr mask because what we have been talking about this whole time is /terrains/, not /objects/.
** the problem
The problem today (<2023-10-24 Tue>), is making the actual image stuff.  Masks already work well, but what if we want to create more variation? Well we can noise reduce masks, that is, randomly transform more and more pixels to black, creating a fading if these are combined in the right way.  But what if I wanted to make more complicated noise in the masks, but make sure they still work in the wang template?

If we look back at the wang-template, we see not only a template, but a set of constraints.  That is, each wang quad authorizes some set of tiles as compatible.  So,
* db schema
#+begin_src sqlite :db db.db
CREATE TABLE IF NOT EXISTS images (
id INTEGER,
name TEXT NOT NULL,
data BLOB,
hash TEXT UNIQUE,
PRIMARY KEY(id AUTOINCREMENT));

CREATE TABLE IF NOT EXISTS sources (
id INTEGER,
name TEXT NOT NULL,
website TEXT,
PRIMARY KEY(id AUTOINCREMENT));

CREATE TABLE IF NOT EXISTS imagesmeta (
id INTEGER REFERENCES images(id) UNIQUE,
source INTEGER REFERENCES sources(id),
width INTEGER,
height INTEGER,
framewidth INTEGER,
frameheight INTEGER,
columns INTEGER,
tilecount INTEGER,
spacing INTEGER,
margin INTEGER);

CREATE TABLE IF NOT EXISTS objects (
id INTEGER,
image INTEGER REFERENCES images(id),
name text NOt NULL,
tiles JSON,
tilesWidth INTEGER,
PRIMARY KEY(id AUTOINCREMENT));


#+end_src

#+RESULTS:
* db reqs
** sources
#+begin_src sqlite :db db.db
select * from sources;
#+end_src

#+RESULTS:
| 9 | default | joegame.org |
** images
#+begin_src sqlite :db db.db :header on
select images.name,imagesmeta.id,imagesmeta.source,images.hash from imagesmeta join images on images.id=imagesmeta.id order by random() limit 12;
#+end_src

#+RESULTS:
| name                                     |    id | source | hash                                                             |
| ME_Singles_Camping_32x32_Tree_251.png    |  8618 |      9 | fe14fe4d867a739959e8fb7f21553b10d246b3831d2fd53bf1b1d355f349e70f |
| rank054.png                              | 51411 |      9 | a59bf79a16359ce4c638c003635ea69db2fe756eecd0ecd46516932578c3bd31 |
| tileN.png                                | 47901 |      9 | 03995b8d736180b60264e5487f913e4a7952931e657262615ed84adc37f84aee |
| tile_0063.png                            | 28937 |      9 | 11195882f40a840cca2e16fca3812bdc4dd729ccc661770206ba97d046afde48 |
| ME_Singles_Garden_16x16_Fountain_1_3.png |  6611 |      9 | de17bfe76897505901179695b38b49701631dbb9e9d76992c59e2c92ec1971e8 |
| emote_stars.png                          | 26260 |      9 | b2907fb91e64a6ac5c33dd789d8a2dbc58542f99eec4cdaa05bcf9b3d2eab598 |
| man_point.png                            | 33094 |      9 | 2bc764307eeba301bc828b0e764e53f3a0f2213133bf2881b52c4ffaf92db616 |
| ME_Singles_Camping_32x32_Tree_13.png     |  8934 |      9 | 8e8a17052b6fe0cc601e129a41923c4b9be12c4cbf0248a919eb0f773853e9b2 |
| emote_alert.png                          | 26000 |      9 | 1e34bc727cf5b823d6b4b2c6fa26df897658056389cca6b623f668d2e31d6593 |
| tag_8.png                                | 45182 |      9 | 4d7d4098df4979a9824d7847dd92c8a29ca43ac8fbd543d53a02c4fab825ec58 |
| monkey.png                               | 45592 |      9 | fdbe1a404dfea9fdb7d8a353773ef774d6c3e37e0919d4a2a9a20317304ed49a |
| elementStone015.png                      | 37552 |      9 | 430fc1e80328866181144d90a5223941b217b0c02e7a42d6eb9e772f008ab4bd |
** objects

#+begin_src sqlite :db db.db
INSERT INTO objects(image,name,tiles,tilesWidth) values (123, 'testobject', '[1, 2, 3, 4, 5, 6]', 2)
#+end_src

#+begin_src sqlite :db db.db
SELECT json(tiles), name, tilesWidth from objects limit 2;
#+end_src

#+RESULTS:
| [1,2,3,4,5,6] | testobject | 2 |
