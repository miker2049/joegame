{
  "operators": [
    ["left", "Comma"],
    ["left", "EqualToOrAssign", "AddAssign", "MinusAssign", "MultiplyAssign", "DivideAssign"],
    ["left", "Or"],
    ["left", "And"],
    ["left", "Xor"],
    ["left", "EqualTo", "GreaterThan", "GreaterThanOrEqualTo", "LessThan", "LessThanOrEqualTo", "NotEqualTo"],
    ["left", "Add", "Minus"],
    ["left", "Multiply", "Divide"],
    ["left", "Not"],
    ["left", "UMINUS"],
    ["left", "LeftParen", "RightParen"]
  ],

  "start": ["node"],

  "bnf": {
    "node": [
      ["statements EndOfInput", "JSON.stringify($1, null, \"  \"); return $1;"]
    ],

    "statements": [
      ["statements conditionalStatement", "$$ = $1.concat([$2]);"],
      ["statements statement", "$$ = $1.concat([$2]);"],
      ["conditionalStatement", "$$ = [$1];"],
      ["statement", "$$ = [$1];"]
    ],

    "conditionalStatement": [
      ["BeginCommand If expression EndCommand statements BeginCommand EndIf EndCommand", "$$ = new yy.IfNode($3, $5);"],
      ["BeginCommand If expression EndCommand statements additionalConditionalStatements", "$$ = new yy.IfElseNode($3, $5, $6);"]
    ],

    "additionalConditionalStatements": [
      ["BeginCommand Else EndCommand statements BeginCommand EndIf EndCommand", "$$ = new yy.ElseNode($4);"],
      ["BeginCommand ElseIf expression EndCommand statements BeginCommand EndIf EndCommand", "$$ = new yy.ElseIfNode($3, $5);"],
      ["BeginCommand ElseIf expression EndCommand statements additionalConditionalStatements", "$$ = new yy.ElseIfNode($3, $5, $6);"]
    ],

    "statement": [
      ["shortcut", "$$ = $1;"],
      ["functionCall", "$$ = $1;"],
      ["jump", "$$ = $1;"],
      ["option", "$$ = $1;"],
      ["assignment", "$$ = $1;"],
      ["Text", "$$ = new yy.TextNode($1, @$);"],
      ["inlineExpression", "$$ = $1;"]
    ],

    "shortcut": [
      ["ShortcutOption Text Indent statements Dedent", "$$ = new yy.DialogShortcutNode($2, $4, @$);"],
      ["ShortcutOption Text BeginCommand If expression EndCommand Indent statements Dedent", "$$ = new yy.ConditionalDialogShortcutNode($2, $8, $5, @$);"]
    ],

    "functionCall": [
      ["BeginCommand Identifier EndCommand", "$$ = new yy.FunctionResultNode($2, []);"],
      ["BeginCommand Identifier LeftParen RightParen EndCommand", "$$ = new yy.FunctionResultNode($2, []);"],
      ["BeginCommand Identifier LeftParen parenArguments RightParen EndCommand", "$$ = new yy.FunctionResultNode($2, $4);"],
      ["BeginCommand Identifier openArguments EndCommand", "$$ = new yy.FunctionResultNode($2, $3);"]
    ],

    "jump": [
      ["OptionStart Text OptionEnd", "$$ = new yy.JumpNode($2, @$);"]
    ],

    "option": [
      ["OptionStart Text OptionDelimit Identifier OptionEnd", "$$ = new yy.OptionNode($2, $4, @$);"]
    ],

    "assignment": [
      ["BeginCommand Set Variable EqualToOrAssign expression EndCommand", "$$ = new yy.SetVariableEqualToNode($3.substring(1), $5);"],
      ["BeginCommand Set Variable AddAssign expression EndCommand", "$$ = new yy.SetVariableAddNode($3.substring(1), $5);"],
      ["BeginCommand Set Variable MinusAssign expression EndCommand", "$$ = new yy.SetVariableMinusNode($3.substring(1), $5);"],
      ["BeginCommand Set Variable MultiplyAssign expression EndCommand", "$$ = new yy.SetVariableMultipyNode($3.substring(1), $5);"],
      ["BeginCommand Set Variable DivideAssign expression EndCommand", "$$ = new yy.SetVariableDivideNode($3.substring(1), $5);"]
    ],

    "expression": [
      ["True", "$$ = new yy.BooleanLiteralNode($1);"],
      ["False", "$$ = new yy.BooleanLiteralNode($1);"],
      ["Number", "$$ = new yy.NumericLiteralNode($1);"],
      ["String", "$$ = new yy.StringLiteralNode($1);"],
      ["Null", "$$ = new yy.NullLiteralNode($1);"],
      ["Variable", "$$ = new yy.VariableNode($1.substring(1));"],

      ["UnaryMinus Number %prec UnaryMinus", "$$ = new yy.UnaryMinusExpressionNode($2);"],
      ["UnaryMinus Variable %prec UnaryMinus", "$$ = new yy.UnaryMinusExpressionNode($2.substring(1));"],

      ["Not expression", "$$ = new yy.NegatedBooleanExpressionNode($2);"],

      ["LeftParen expression RightParen", "$$ = new yy.ArithmeticExpressionNode($2);"],

      ["expression Add expression", "$$ = new yy.ArithmeticExpressionAddNode($1, $3);"],
      ["expression Minus expression", "$$ = new yy.ArithmeticExpressionMinusNode($1, $3);"],
      ["expression Multiply expression", "$$ = new yy.ArithmeticExpressionMultiplyNode($1, $3);"],
      ["expression Divide expression", "$$ = new yy.ArithmeticExpressionDivideNode($1, $3);"],

      ["expression Or expression", "$$ = new yy.BooleanOrExpressionNode($1, $3);"],
      ["expression And expression", "$$ = new yy.BooleanAndExpressionNode($1, $3);"],
      ["expression Xor expression", "$$ = new yy.BooleanXorExpressionNode($1, $3);"],

      ["expression EqualTo expression", "$$ = new yy.EqualToExpressionNode($1, $3);"],
      ["expression NotEqualTo expression", "$$ = new yy.NotEqualToExpressionNode($1, $3);"],
      ["expression GreaterThan expression", "$$ = new yy.GreaterThanExpressionNode($1, $3);"],
      ["expression GreaterThanOrEqualTo expression", "$$ = new yy.GreaterThanOrEqualToExpressionNode($1, $3);"],
      ["expression LessThan expression", "$$ = new yy.LessThanExpressionNode($1, $3);"],
      ["expression LessThanOrEqualTo expression", "$$ = new yy.LessThanOrEqualToExpressionNode($1, $3);"],

      ["functionResultExpression", "$$ = $1;"]
    ],

    "functionResultExpression": [
      ["Identifier LeftParen parenArguments RightParen", "$$ = new yy.FunctionResultNode($1, $3);"]
    ],

    "parenArguments": [
      ["parenArguments Comma argument", "$$ = $1.concat([$3]);"],
      ["argument", "$$ = [$1];"]
    ],

    "openArguments": [
      ["openArguments argument", "$$ = $1.concat([$2]);"],
      ["argument", "$$ = [$1];"]
    ],

    "argument": [
      ["Identifier", "$$ = new yy.TextNode($1);"],
      ["Number", "$$ = new yy.NumericLiteralNode($1);"],
      ["String", "$$ = new yy.StringLiteralNode($1);"],
      ["Variable", "$$ = new yy.VariableNode($1.substring(1));"],
      ["True", "$$ = new yy.BooleanLiteralNode($1);"],
      ["False", "$$ = new yy.BooleanLiteralNode($1);"],
      ["Null", "$$ = new yy.NullLiteralNode($1);"]
    ],

    "inlineExpression": [
      ["BeginInlineExp expression EndInlineExp", "$$ = new yy.InlineExpressionNode($2, @$);"]
    ]
  }
}
