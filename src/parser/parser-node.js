/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserNode = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,11],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[5,8,21,23,25,31,65],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,35],$Va=[1,33],$Vb=[1,30],$Vc=[1,25],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[1,31],$Vi=[1,32],$Vj=[1,41],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,42],$Vo=[1,43],$Vp=[1,47],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[11,28,49,50,51,52,53,54,55,56,57,58,59,60,61,66],$VE=[11,26,35,41,42,43,44,45],$VF=[11,26,28,35,41,42,43,44,45,63],$VG=[1,106],$VH=[28,63],$VI=[11,28,49,50,53,54,55,56,57,58,59,60,61,66],$VJ=[11,28,53,54,55,56,57,58,59,60,61,66],$VK=[1,129],$VL=[1,130];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"node":3,"statements":4,"EndOfInput":5,"conditionalStatement":6,"statement":7,"BeginCommand":8,"If":9,"expression":10,"EndCommand":11,"EndIf":12,"additionalConditionalStatements":13,"Else":14,"ElseIf":15,"shortcut":16,"functionCall":17,"jump":18,"option":19,"assignment":20,"Text":21,"inlineExpression":22,"ShortcutOption":23,"Indent":24,"Dedent":25,"Identifier":26,"LeftParen":27,"RightParen":28,"parenArguments":29,"openArguments":30,"OptionStart":31,"OptionEnd":32,"OptionDelimit":33,"Set":34,"Variable":35,"EqualToOrAssign":36,"AddAssign":37,"MinusAssign":38,"MultiplyAssign":39,"DivideAssign":40,"True":41,"False":42,"Number":43,"String":44,"Null":45,"UnaryMinus":46,"%prec":47,"Not":48,"Add":49,"Minus":50,"Multiply":51,"Divide":52,"Or":53,"And":54,"Xor":55,"EqualTo":56,"NotEqualTo":57,"GreaterThan":58,"GreaterThanOrEqualTo":59,"LessThan":60,"LessThanOrEqualTo":61,"functionResultExpression":62,"Comma":63,"argument":64,"BeginInlineExp":65,"EndInlineExp":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EndOfInput",8:"BeginCommand",9:"If",11:"EndCommand",12:"EndIf",14:"Else",15:"ElseIf",21:"Text",23:"ShortcutOption",24:"Indent",25:"Dedent",26:"Identifier",27:"LeftParen",28:"RightParen",31:"OptionStart",32:"OptionEnd",33:"OptionDelimit",34:"Set",35:"Variable",36:"EqualToOrAssign",37:"AddAssign",38:"MinusAssign",39:"MultiplyAssign",40:"DivideAssign",41:"True",42:"False",43:"Number",44:"String",45:"Null",46:"UnaryMinus",47:"%prec",48:"Not",49:"Add",50:"Minus",51:"Multiply",52:"Divide",53:"Or",54:"And",55:"Xor",56:"EqualTo",57:"NotEqualTo",58:"GreaterThan",59:"GreaterThanOrEqualTo",60:"LessThan",61:"LessThanOrEqualTo",63:"Comma",65:"BeginInlineExp",66:"EndInlineExp"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[4,1],[6,8],[6,6],[13,7],[13,8],[13,6],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[16,5],[16,9],[17,3],[17,5],[17,6],[17,4],[18,3],[19,5],[20,6],[20,6],[20,6],[20,6],[20,6],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,4],[10,4],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[62,4],[29,3],[29,1],[30,2],[30,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
JSON.stringify($$[$0-1], null, "  "); return $$[$0-1];
break;
case 2: case 3: case 58:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 4: case 5: case 57: case 59:
this.$ = [$$[$0]];
break;
case 6:
this.$ = new yy.IfNode($$[$0-5], $$[$0-3]);
break;
case 7:
this.$ = new yy.IfElseNode($$[$0-3], $$[$0-1], $$[$0]);
break;
case 8:
this.$ = new yy.ElseNode($$[$0-3]);
break;
case 9:
this.$ = new yy.ElseIfNode($$[$0-5], $$[$0-3]);
break;
case 10:
this.$ = new yy.ElseIfNode($$[$0-3], $$[$0-1], $$[$0]);
break;
case 11: case 12: case 13: case 14: case 15: case 17: case 54:
this.$ = $$[$0];
break;
case 16:
this.$ = new yy.TextNode($$[$0], this._$);
break;
case 18:
this.$ = new yy.DialogShortcutNode($$[$0-3], $$[$0-1], this._$);
break;
case 19:
this.$ = new yy.ConditionalDialogShortcutNode($$[$0-7], $$[$0-1], $$[$0-4], this._$);
break;
case 20:
this.$ = new yy.FunctionResultNode($$[$0-1], []);
break;
case 21:
this.$ = new yy.FunctionResultNode($$[$0-3], []);
break;
case 22:
this.$ = new yy.FunctionResultNode($$[$0-4], $$[$0-2]);
break;
case 23:
this.$ = new yy.FunctionResultNode($$[$0-2], $$[$0-1]);
break;
case 24:
this.$ = new yy.JumpNode($$[$0-1], this._$);
break;
case 25:
this.$ = new yy.OptionNode($$[$0-3], $$[$0-1], this._$);
break;
case 26:
this.$ = new yy.SetVariableEqualToNode($$[$0-3].substring(1), $$[$0-1]);
break;
case 27:
this.$ = new yy.SetVariableAddNode($$[$0-3].substring(1), $$[$0-1]);
break;
case 28:
this.$ = new yy.SetVariableMinusNode($$[$0-3].substring(1), $$[$0-1]);
break;
case 29:
this.$ = new yy.SetVariableMultipyNode($$[$0-3].substring(1), $$[$0-1]);
break;
case 30:
this.$ = new yy.SetVariableDivideNode($$[$0-3].substring(1), $$[$0-1]);
break;
case 31: case 32: case 64: case 65:
this.$ = new yy.BooleanLiteralNode($$[$0]);
break;
case 33: case 61:
this.$ = new yy.NumericLiteralNode($$[$0]);
break;
case 34: case 62:
this.$ = new yy.StringLiteralNode($$[$0]);
break;
case 35: case 66:
this.$ = new yy.NullLiteralNode($$[$0]);
break;
case 36: case 63:
this.$ = new yy.VariableNode($$[$0].substring(1));
break;
case 37:
this.$ = new yy.UnaryMinusExpressionNode($$[$0-2]);
break;
case 38:
this.$ = new yy.UnaryMinusExpressionNode($$[$0-2].substring(1));
break;
case 39:
this.$ = new yy.NegatedBooleanExpressionNode($$[$0]);
break;
case 40:
this.$ = new yy.ArithmeticExpressionNode($$[$0-1]);
break;
case 41:
this.$ = new yy.ArithmeticExpressionAddNode($$[$0-2], $$[$0]);
break;
case 42:
this.$ = new yy.ArithmeticExpressionMinusNode($$[$0-2], $$[$0]);
break;
case 43:
this.$ = new yy.ArithmeticExpressionMultiplyNode($$[$0-2], $$[$0]);
break;
case 44:
this.$ = new yy.ArithmeticExpressionDivideNode($$[$0-2], $$[$0]);
break;
case 45:
this.$ = new yy.BooleanOrExpressionNode($$[$0-2], $$[$0]);
break;
case 46:
this.$ = new yy.BooleanAndExpressionNode($$[$0-2], $$[$0]);
break;
case 47:
this.$ = new yy.BooleanXorExpressionNode($$[$0-2], $$[$0]);
break;
case 48:
this.$ = new yy.EqualToExpressionNode($$[$0-2], $$[$0]);
break;
case 49:
this.$ = new yy.NotEqualToExpressionNode($$[$0-2], $$[$0]);
break;
case 50:
this.$ = new yy.GreaterThanExpressionNode($$[$0-2], $$[$0]);
break;
case 51:
this.$ = new yy.GreaterThanOrEqualToExpressionNode($$[$0-2], $$[$0]);
break;
case 52:
this.$ = new yy.LessThanExpressionNode($$[$0-2], $$[$0]);
break;
case 53:
this.$ = new yy.LessThanOrEqualToExpressionNode($$[$0-2], $$[$0]);
break;
case 55:
this.$ = new yy.FunctionResultNode($$[$0-3], $$[$0-1]);
break;
case 56:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 60:
this.$ = new yy.TextNode($$[$0]);
break;
case 67:
this.$ = new yy.InlineExpressionNode($$[$0-1], this._$);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},{1:[3]},{5:[1,16],6:17,7:18,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},o($V5,[2,4]),o($V5,[2,5]),{9:$V6,26:$V7,34:$V8},o($V5,[2,11]),o($V5,[2,12]),o($V5,[2,13]),o($V5,[2,14]),o($V5,[2,15]),o($V5,[2,16]),o($V5,[2,17]),{21:[1,22]},{21:[1,23]},{10:24,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{1:[2,1]},o($V5,[2,2]),o($V5,[2,3]),{10:36,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{11:[1,37],26:$Vj,27:[1,38],30:39,35:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,64:40},{35:[1,48]},{8:[1,50],24:[1,49]},{32:[1,51],33:[1,52]},{49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,66:[1,53]},o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),o($VD,[2,36]),{35:[1,68],43:[1,67]},{10:69,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:70,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},o($VD,[2,54]),{27:[1,71]},{11:[1,72],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},o($V5,[2,20]),{26:$Vj,28:[1,73],29:74,35:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,64:75},{11:[1,76],26:$Vj,35:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,64:77},o($VE,[2,59]),o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),o($VF,[2,66]),{36:[1,78],37:[1,79],38:[1,80],39:[1,81],40:[1,82]},{4:83,6:3,7:4,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},{9:[1,84]},o($V5,[2,24]),{26:[1,85]},o($V5,[2,67]),{10:86,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:87,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:88,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:89,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:90,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:91,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:92,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:93,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:94,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:95,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:96,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:97,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:98,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{47:[1,99]},{47:[1,100]},o($VD,[2,39]),{28:[1,101],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},{26:$Vj,29:102,35:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,64:75},{4:103,6:3,7:4,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},{11:[1,104]},{28:[1,105],63:$VG},o($VH,[2,57]),o($V5,[2,23]),o($VE,[2,58]),{10:107,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:108,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:109,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:110,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{10:111,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{6:17,7:18,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,25:[1,112],31:$V3,65:$V4},{10:113,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{32:[1,114]},o($VI,[2,41],{51:$Vs,52:$Vt}),o($VI,[2,42],{51:$Vs,52:$Vt}),o($VD,[2,43]),o($VD,[2,44]),o([11,28,53,66],[2,45],{49:$Vq,50:$Vr,51:$Vs,52:$Vt,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o([11,28,53,54,66],[2,46],{49:$Vq,50:$Vr,51:$Vs,52:$Vt,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o([11,28,53,54,55,66],[2,47],{49:$Vq,50:$Vr,51:$Vs,52:$Vt,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($VJ,[2,48],{49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($VJ,[2,49],{49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($VJ,[2,50],{49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($VJ,[2,51],{49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($VJ,[2,52],{49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($VJ,[2,53],{49:$Vq,50:$Vr,51:$Vs,52:$Vt}),{46:[1,115]},{46:[1,116]},o($VD,[2,40]),{28:[1,117],63:$VG},{6:17,7:18,8:[1,118],13:119,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},o($V5,[2,21]),{11:[1,120]},{26:$Vj,35:$Vk,41:$Vl,42:$Vm,43:$Vn,44:$Vo,45:$Vp,64:121},{11:[1,122],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},{11:[1,123],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},{11:[1,124],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},{11:[1,125],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},{11:[1,126],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},o($V5,[2,18]),{11:[1,127],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},o($V5,[2,25]),o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,55]),{9:$V6,12:[1,128],14:$VK,15:$VL,26:$V7,34:$V8},o($V5,[2,7]),o($V5,[2,22]),o($VH,[2,56]),o($V5,[2,26]),o($V5,[2,27]),o($V5,[2,28]),o($V5,[2,29]),o($V5,[2,30]),{24:[1,131]},{11:[1,132]},{11:[1,133]},{10:134,26:$V9,27:$Va,35:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh,48:$Vi,62:34},{4:135,6:3,7:4,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},o($V5,[2,6]),{4:136,6:3,7:4,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},{11:[1,137],49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC},{6:17,7:18,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,25:[1,138],31:$V3,65:$V4},{6:17,7:18,8:[1,139],16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},{4:140,6:3,7:4,8:$V0,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},o($V5,[2,19]),{9:$V6,12:[1,141],26:$V7,34:$V8},{6:17,7:18,8:[1,142],13:143,16:6,17:7,18:8,19:9,20:10,21:$V1,22:12,23:$V2,31:$V3,65:$V4},{11:[1,144]},{9:$V6,12:[1,145],14:$VK,15:$VL,26:$V7,34:$V8},o($V5,[2,10]),o($V5,[2,8]),{11:[1,146]},o($V5,[2,9])],
defaultActions: {16:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserNode;
exports.Parser = parserNode.Parser;
exports.parse = function () { return parserNode.parse.apply(parserNode, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}